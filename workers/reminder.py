from datetime import date, datetime, timedelta
import os
import requests

from dotenv import load_dotenv
from loguru import logger

import dal

load_dotenv()
BOT_TOKEN = os.getenv('TOKEN')


class Reminder:
    def __init__(self):
        self.reminder_trainings = None
        self.url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

    async def remind(self, training):
        training_date = training.created_date.date() + timedelta(
            days=training.day)  # TODO: –£—Ç–æ—á–Ω–∏—Ç—å —É –°—Ç–µ–ø—ã, –∫–æ–≥–¥–∞ –ø—Ä–µ–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        current_time = datetime.today()
        current_date = date.today()

        if current_date == training_date - timedelta(days=1) and any([
            current_time.hour == 19 and current_time.minute == 0,
            current_time.hour == 18 and current_time.minute == 59,
            current_time.hour == 19 and current_time.minute == 1
        ]
        ):
            resp = requests.post(self.url, params={
                "text": "üåÜ–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. "
                        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –≤—ã—Å–ø–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏–µ–º.",
                "chat_id": training.user_id})
            logger.info(f'–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {training.user_id} - {resp.json()}')

        elif current_date == training_date and any([
            current_time.hour == 10 and current_time.minute == 0,
            current_time.hour == 9 and current_time.minute == 59,
            current_time.hour == 10 and current_time.minute == 1
        ]
        ):
            resp = requests.post(self.url, params={
                "text": "üèô–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. "
                        "–ñ–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è!",
                "chat_id": training.user_id})
            logger.info(f'–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {training.user_id} - {resp.json()}')

        elif current_date == training_date + timedelta(days=1) and any([
            current_time.hour == 10 and current_time.minute == 0,
            current_time.hour == 9 and current_time.minute == 59,
            current_time.hour == 10 and current_time.minute == 1
        ]
        ):
            resp = requests.post(self.url, params={
                "text": "‚ÄºÔ∏è–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ—é –ø—Ä–æ—à–ª—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É(\n"
                        "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –±–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –¥–∞–¥—É—Ç –Ω—É–∂–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
                        "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø—Ä–∏–≤—ã—á–Ω—ã–π —Ä–∏—Ç–º!",
                "chat_id": training.user_id})
            logger.info(f'–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {training.user_id} - {resp.json()}')

        elif current_date == training_date + timedelta(days=2) and any([
            current_time.hour == 10 and current_time.minute == 0,
            current_time.hour == 9 and current_time.minute == 59,
            current_time.hour == 10 and current_time.minute == 1
        ]
        ):
            notification_text = ('‚ÄºÔ∏è–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –≤–∞—Å –µ—Å—Ç—å 1 –Ω–µ–≤–æ—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫. '
                                 '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.')
            if (
                    await dal.User.check_if_subscribed_by_user_id(training.user_id)
                    or not
                    await dal.User.check_if_rebuilt_by_user_id(training.user_id)
            ):
                notification_text += '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.'

            resp = requests.post(self.url, params={
                "text": notification_text,
                "chat_id": training.user_id})
            logger.info(f'–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {training.user_id} - {resp.json()}')

        logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–∫–æ–Ω—á–µ–Ω–∞')

    async def execute(self):
        self.reminder_trainings = await dal.Trainings.get_all_active_trainings_with_dates()
        if self.reminder_trainings:
            for training in self.reminder_trainings:
                await self.remind(training)

    async def __call__(self, *args, **kwargs):
        await self.execute()
