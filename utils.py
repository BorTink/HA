from loguru import logger
import asyncio

from gpt.chat import fill_prompt, fill_prompt_next_week, fill_meal_plan_prompt
from app.states import BaseStates
import app.keyboards as kb
import dal


async def process_prompt(user_id, client_changes=None):
    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id = {user_id}')
    data = await dal.User.select_attributes(user_id)

    training = await fill_prompt(data, client_changes)
    await dal.Trainings.remove_prev_trainings(
        user_id=int(user_id)
    )
    training = training.replace('"', '').replace("""'""", '')
    training = replace_nth_occ(training, '**', '</b>', 2)
    training = training.replace('**', '<b>')
    training = training.replace('–ü–æ–¥—ä–µ–º—ã', '–ü–æ–¥—ä–µ–º').replace('–†–∞–∑–≤–æ–¥–∫–∞', '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ')
    training = training.split('\n')

    day_number = 1
    final_training = []

    for line in training:
        if '–î–µ–Ω—å' in line:
            continue
        if len(line) < 5 or '–†–∞–∑–º–∏–Ω–∫–∞' in line:
            final_training.append(line)
            continue

        exercise_name = line.split(' -')[0]
        exercise_name_words = exercise_name.replace('-', '').split()
        similar_exercises = await dal.Exercises.get_all_similar_exercises_by_word(exercise_name_words.pop(0))

        if similar_exercises:
            temp_exercises = []

            for word in exercise_name_words:
                for exercise in similar_exercises:
                    if word in exercise.name:
                        temp_exercises.append(exercise)

                if not temp_exercises:
                    break

                similar_exercises = temp_exercises
                temp_exercises = []

            min_len_word = 100000
            final_exercise = None
            for exercise in similar_exercises:
                if len(exercise.name) < min_len_word:
                    min_len_word = len(exercise.name)
                    final_exercise = exercise

            exercise_name = f'<a href="{final_exercise.link}">{exercise_name}</a>'

        final_training.append(f'{exercise_name} -{" -".join(line.split(" -")[1:])}')

    final_training = '\n'.join(final_training)

    final_training += ('üèÅ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ <b>–≤–≤–µ—Å—Ç–∏ –≤–µ—Å</b>, '
                       '–µ—Å–ª–∏ –≤–µ—Å –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ª–∏–±–æ <b>–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>.')

    await dal.Trainings.update_trainings(
        user_id=int(user_id),
        day=day_number,
        data=final_training
    )

    return final_training


async def proccess_meal_plan_prompt(user_id):
    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id = {user_id}')
    data = await dal.User.select_attributes(user_id)

    meal_plan = await fill_meal_plan_prompt(data)

    meal_plan = replace_nth_occ(meal_plan, '**', '</b>', 2)
    meal_plan = meal_plan.replace('**', '<b>')

    await dal.Meals.insert_meal(
        user_id=int(user_id),
        day=1,
        meal_plan=meal_plan
    )

    return meal_plan


async def process_prompt_next_week(user_id, client_edits_next_week=None):
    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id = {user_id}')
    data = await dal.User.select_attributes(user_id)
    trainings_prev_week = ''
    for i in range(1, 8):
        if trainings_prev_week != '':
            trainings_prev_week += '\n\n'
        workout, _, _ = await dal.Trainings.get_trainings_by_day(user_id, i)
        if workout is None:
            trainings_prev_week += f'–î–µ–Ω—å {i} - –û—Ç–¥—ã—Ö'
        else:
            trainings_prev_week += f'–î–µ–Ω—å {i} - {workout}'

    training = await fill_prompt_next_week(data, trainings_prev_week, client_edits_next_week)

    training = training.replace('"', '').replace("""'""", '')
    training = replace_nth_occ(training, '**', '</b>', 2)
    training = training.replace('**', '<b>')
    training = training.replace('–ü–æ–¥—ä–µ–º—ã', '–ü–æ–¥—ä–µ–º').replace('–†–∞–∑–≤–æ–¥–∫–∞', '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ')
    training = training.split('\n')

    final_training = []

    for line in training:
        if '–î–µ–Ω—å' in line:
            continue
        if len(line) < 5 or '–†–∞–∑–º–∏–Ω–∫–∞' in line:
            final_training.append(line)
            continue

        exercise_name = line.split(' -')[0]
        exercise_name_words = exercise_name.replace('-', '').split()
        similar_exercises = await dal.Exercises.get_all_similar_exercises_by_word(exercise_name_words.pop(0))

        if similar_exercises:
            temp_exercises = []

            for word in exercise_name_words:
                for exercise in similar_exercises:
                    if word in exercise.name:
                        temp_exercises.append(exercise)

                if not temp_exercises:
                    break

                similar_exercises = temp_exercises
                temp_exercises = []

            min_len_word = 100000
            final_exercise = None
            for exercise in similar_exercises:
                if len(exercise.name) < min_len_word:
                    min_len_word = len(exercise.name)
                    final_exercise = exercise

            exercise_name = f'<a href="{final_exercise.link}">{exercise_name}</a>'

        final_training.append(f'{exercise_name} -{" -".join(line.split(" -")[1:])}')

    final_training = '\n'.join(final_training)

    return final_training


async def split_workout(workout, weight_index, weight_value):
    part_before_kg = workout[weight_index].split(' ')
    workout_in_process = ' '.join(part_before_kg[:-1]) + f' <b>[ {weight_value} ]</b>' + ' –∫–≥'

    first_half = ' –∫–≥'.join(workout[0:weight_index])
    if first_half:
        first_half += ' –∫–≥'
    workout_in_process = first_half + workout_in_process + ' –∫–≥'.join(workout[weight_index + 1:])

    return workout_in_process


async def process_workout(
        workout_in_process,
        data,
        state,
        message,
        kb,
        user_id=None,
        return_to_training=False
):
    from app.handlers import bot

    async def edit_message_text_def(text, chat_id, message_id, **kwargs):
        await bot.edit_message_text(text, chat_id, message_id, **kwargs)

    async def end_not_last_workout():
        training, day = await dal.Trainings.get_active_training_by_user_id(user_id)

        async with state.proxy() as data:
            next_training_in_days = int(day) - int(data['day'])

            if next_training_in_days % 100 == 1:
                day_word = '–¥–µ–Ω—å'
            elif next_training_in_days % 100 in [2, 3, 4]:
                day_word = '–¥–Ω—è'
            else:
                day_word = '–¥–Ω–µ–π'

            await message.answer(f'–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∂–¥—ë—Ç –≤–∞—Å —á–µ—Ä–µ–∑ {next_training_in_days} {day_word}.')

    if user_id is None:
        user_id = message.from_user.id
    workout_in_process = workout_in_process.replace('<b>[ ', '').replace(' ]</b>', '')
    data['workout'] = workout_in_process.split(' –∫–≥')

    if data['weight_index'] == len(data['workout']) - 2:
        await state.set_state(BaseStates.show_trainings)

        try:
            await bot.delete_message(message.chat.id, data['temp_message'])
        except:
            pass

        for i in range(len(data['workout']) - 1):
            cur_segment = data['workout'][i].split('\n')[-1].split(' ')
            cur_segment = [x for x in cur_segment if x]
            name = ' '.join(cur_segment[:-2])
            weight = cur_segment[-1]

            await dal.Exercises.add_exercise(name)
            await dal.UserResults.update_user_results(
                user_id=user_id,
                name=name,
                weight=weight
            )

        first_training = await dal.User.check_if_first_training_by_user_id(user_id)
        if first_training:
            await state.set_state(BaseStates.subscription_proposition)
            await edit_message_text_def(text=
                                        'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π! –ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–¥–µ–ª–∞–Ω.'
                                        '‚Äî –î–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b> –∫–∞–∫ –±—É–¥–µ—Ç <b>–≤—ã–≥–ª—è–¥–µ—Ç—å</b> '
                                        '–æ–¥–Ω–∞ –∏–∑ –≤–∞—à–∏—Ö <b>–±—É–¥—É—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b> 7–π - 9–π –Ω–µ–¥–µ–ª–∏.',
                                        chat_id=message.chat.id,
                                        message_id=data['message'],
                                        parse_mode='HTML',
                                        reply_markup=kb.first_training_proposition,
                                        )
            await asyncio.sleep(1)

        else:
            await edit_message_text_def(text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
                                        chat_id=message.chat.id,
                                        message_id=data['message']
                                        )
            await asyncio.sleep(1)

            await message.answer('–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω (7-8 —á–∞—Å–æ–≤) –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —è–≤–ª—è—é—Ç—Å—è '
                                 '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ–≥—Ä–∞–º–º—ã, '
                                 '–±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!')
            await asyncio.sleep(1)

            subscribed = await dal.User.check_if_subscribed_by_user_id(user_id)

            await dal.Trainings.update_trainings(
                user_id=user_id,
                day=data['day'],
                data=workout_in_process,
                active=False
            )
            training, new_day, active = await dal.Trainings.get_next_training(
                user_id=user_id,
                current_day=data['day']
            )
            if training:
                await dal.Trainings.update_active_training_by_day(
                    user_id=user_id,
                    day=new_day,
                    active=True
                )
                await end_not_last_workout()

            else:
                if not subscribed:
                    await state.set_state(BaseStates.subscription_proposition)
                    await message.answer('„Ä∞ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏, '
                                         '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –∫—É–ø–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ 9 –Ω–µ–¥–µ–ª—å:\n\n'
                                         '‚Ä¢ 99 —Ä—É–±./ –º–µ—Å. (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)\n\n'
                                         '‚Ä¢ 199 —Ä—É–±./ –º–µ—Å. (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏+–ø–∏—Ç–∞–Ω–∏–µ)\n\n' 
                                         '‚Ä¢ 399 —Ä—É–±./ 9 –Ω–µ–¥–µ–ª—å (<i>–≤–º–µ—Å—Ç–æ <s>507</s> —Ä—É–±.)~ —Å –ø–∏—Ç–∞–Ω–∏–µ–º</i>\n\n\n',
                                         parse_mode='HTML')
                    await asyncio.sleep(2)

                    await message.answer(
                        '–§—É–Ω–∫—Ü–∏–∏:\n\n'
                        'üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b> –Ω–∞ 9 –Ω–µ–¥–µ–ª—å, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è <b>–¥–ª—è –≤–∞—Å, '
                        '—É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è</b>\n\n\n'
                        'üçè <b>–ò–∑–º–µ–Ω—è—é—â–∏–π—Å—è –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b> –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n\n'
                        '‚öô –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>–º–µ–Ω—è—Ç—å –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–¥ —Å–µ–±—è\n\n\n'
                        'üéØ <b>–ù–∞–∏–≤—ã—Å—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> –∑–∞ —Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞\n\n\n'
                        'üõü <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> –Ω–∞ –≤—Å—ë–º –ø–µ—Ä–∏–æ–¥–µ –∑–∞–Ω—è—Ç–∏–π',
                        parse_mode='HTML',
                        reply_markup=kb.subscribe
                    )
                else:
                    await state.set_state(BaseStates.end_of_week_changes)
                    temp_message = await message.answer('–ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, '
                                                        '–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–Ω–µ—Å—Ç–∏ '
                                                        '–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ü–µ–ª–æ–º '
                                                        '(–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)')
                    data['temp_message'] = temp_message.message_id

    else:
        if not return_to_training:
            data['weight_index'] += 1
        current_weight = data['workout'][data['weight_index']].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        cur_state = await state.get_state()
        print(cur_state)
        await edit_message_text_def(text=f'<b>–î–µ–Ω—å {data["day"]}</b>\n' +
                                         f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' +
                                         workout_in_process,
                                    chat_id=message.chat.id,
                                    message_id=data['message'],
                                    reply_markup=kb.insert_weights_in_workout,
                                    parse_mode='HTML'
                                    )


async def complete_training(
        workout_in_process,
        data,
        state,
        message,
        kb,
        user_id=None
):
    from app.handlers import bot

    async def edit_message_text_def(text, chat_id, message_id, **kwargs):
        await bot.edit_message_text(text, chat_id, message_id, **kwargs)

    async def end_not_last_workout():
        training, day = await dal.Trainings.get_active_training_by_user_id(user_id)

        async with state.proxy() as data:
            next_training_in_days = int(day) - int(data['day'])

            if next_training_in_days % 100 == 1:
                day_word = '–¥–µ–Ω—å'
            elif next_training_in_days % 100 in [2, 3, 4]:
                day_word = '–¥–Ω—è'
            else:
                day_word = '–¥–Ω–µ–π'

            await message.answer(f'–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∂–¥—ë—Ç –≤–∞—Å —á–µ—Ä–µ–∑ {next_training_in_days} {day_word}.')

    await state.set_state(BaseStates.show_trainings)

    for i in range(len(data['workout']) - 1):
        cur_segment = data['workout'][i].split('\n')[-1].split(' ')
        cur_segment = [x for x in cur_segment if x]
        name = ' '.join(cur_segment[:-2])
        weight = cur_segment[-1]

        await dal.Exercises.add_exercise(name)
        await dal.UserResults.update_user_results(
            user_id=user_id,
            name=name,
            weight=weight
        )

    first_training = await dal.User.check_if_first_training_by_user_id(user_id)
    if first_training:
        await edit_message_text_def(text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø–µ—Ä–≤—ã–º —É—Å–ø–µ—à–Ω—ã–º –∑–∞–Ω—è—Ç–∏–µ–º!',
                                    chat_id=message.chat.id,
                                    message_id=data['message']
                                    )
        await asyncio.sleep(1)

    else:
        await edit_message_text_def(text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
                                    chat_id=message.chat.id,
                                    message_id=data['message']
                                    )
        await asyncio.sleep(1)

    await message.answer('–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω (7-8 —á–∞—Å–æ–≤) –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —è–≤–ª—è—é—Ç—Å—è '
                         '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ–≥—Ä–∞–º–º—ã, '
                         '–±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!')
    await asyncio.sleep(1)

    subscribed = await dal.User.check_if_subscribed_by_user_id(user_id)

    await dal.Trainings.update_trainings(
        user_id=user_id,
        day=data['day'],
        data=workout_in_process,
        active=False
    )
    training, new_day, active = await dal.Trainings.get_next_training(
        user_id=user_id,
        current_day=data['day']
    )
    if training:
        await dal.Trainings.update_active_training_by_day(
            user_id=user_id,
            day=new_day,
            active=True
        )
        await end_not_last_workout()

    else:
        if not subscribed:
            await state.set_state(BaseStates.subscription_proposition)
            await message.answer('„Ä∞ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏, '
                                 '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –∫—É–ø–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ 9 –Ω–µ–¥–µ–ª—å:\n\n'
                                 '‚Ä¢ 99 —Ä—É–±./ –º–µ—Å. (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)\n\n'
                                 '‚Ä¢ 199 —Ä—É–±./ –º–µ—Å. (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏+–ø–∏—Ç–∞–Ω–∏–µ)\n\n'
                                 '‚Ä¢ 399 —Ä—É–±./ 9 –Ω–µ–¥–µ–ª—å (<i>–≤–º–µ—Å—Ç–æ <s>507</s> —Ä—É–±.)~ —Å –ø–∏—Ç–∞–Ω–∏–µ–º</i>\n\n\n',
                                 parse_mode='HTML')
            await asyncio.sleep(2)

            await message.answer(
                '–§—É–Ω–∫—Ü–∏–∏:\n\n'
                'üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b> –Ω–∞ 9 –Ω–µ–¥–µ–ª—å, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è <b>–¥–ª—è –≤–∞—Å, '
                '—É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è</b>\n\n\n'
                'üçè <b>–ò–∑–º–µ–Ω—è—é—â–∏–π—Å—è –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b> –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n\n'
                '‚öô –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>–º–µ–Ω—è—Ç—å –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–¥ —Å–µ–±—è\n\n\n'
                'üéØ <b>–ù–∞–∏–≤—ã—Å—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> –∑–∞ —Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞\n\n\n'
                'üõü <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> –Ω–∞ –≤—Å—ë–º –ø–µ—Ä–∏–æ–¥–µ –∑–∞–Ω—è—Ç–∏–π',
                parse_mode='HTML',
                reply_markup=kb.subscribe
            )
        else:
            await state.set_state(BaseStates.end_of_week_changes)
            temp_message = await message.answer('–ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, '
                                                '–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–Ω–µ—Å—Ç–∏ '
                                                '–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ü–µ–ª–æ–º '
                                                '(–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)')
            data['temp_message'] = temp_message.message_id


async def get_training_markup(user_id, day, ):
    next_training, _, _ = await dal.Trainings.get_next_training(
        user_id=user_id,
        current_day=day
    )

    reply_markup = kb.trainings_tab
    if next_training is None:
        reply_markup = kb.trainings_tab_without_next

    else:
        prev_training, _, _ = await dal.Trainings.get_prev_training(
            user_id=user_id,
            current_day=day
        )
        if prev_training is None:
            reply_markup = kb.trainings_tab_without_prev

    return reply_markup


def replace_nth_occ(string, sub, replace_string, n):
    find = string.find(sub)
    i = 1
    while find != -1:
        if i == n:
            string = string[:find]+replace_string+string[find + len(sub):]
            i = 0
        find = string.find(sub, find + len(sub) + 1)
        i += 1
    return string
