from loguru import logger
import asyncio

from gpt.chat import fill_prompt
from app.states import BaseStates
import app.keyboards as kb
import dal


async def process_prompt(user_id, client_changes=None):
    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id = {user_id}')
    data = await dal.User.select_attributes(user_id)

    trainings = await fill_prompt(data, client_changes)
    await dal.Trainings.remove_prev_trainings(
        user_id=int(user_id)
    )
    day_number = 1
    for training in trainings:
        if '–û—Ç–¥—ã—Ö' in training:
            day_number += 1
        else:
            cur_training = training.replace('"', '').replace("""'""", '')
            cur_training = cur_training.replace('–ü–æ–¥—ä–µ–º—ã', '–ü–æ–¥—ä–µ–º').replace('–†–∞–∑–≤–æ–¥–∫–∞', '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ').split('\n')[1:]

            final_training = []
            for line in cur_training:
                if len(line) < 5 or '–†–∞–∑–º–∏–Ω–∫–∞' in line:
                    final_training.append(line)
                    continue

                exercise_name = line.split(' -')[0]
                exercise_name_words = exercise_name.split()
                similar_exercises = await dal.Exercises.get_all_similar_exercises_by_word(exercise_name_words.pop(0))

                if similar_exercises:
                    temp_exercises = []

                    for word in exercise_name_words:
                        for exercise in similar_exercises:
                            if word in exercise.name:
                                temp_exercises.append(exercise)

                        if not temp_exercises:
                            break

                        similar_exercises = temp_exercises
                        temp_exercises = []

                    min_len_word = 100000
                    final_exercise = None
                    for exercise in similar_exercises:
                        if len(exercise.name) < min_len_word:
                            min_len_word = len(exercise.name)
                            final_exercise = exercise

                    exercise_name = f'<a href="{final_exercise.link}">{exercise_name}</a>'

                final_training.append(f'{exercise_name} -{" -".join(line.split(" -")[1:])}')

            final_training = '\n'.join(final_training)

            await dal.Trainings.update_trainings(
                user_id=int(user_id),
                day=day_number,
                data=final_training
            )
            day_number += 1

    return trainings


async def split_workout(workout, weight_index, weight_value):
    part_before_kg = workout[weight_index].split(' ')
    workout_in_process = ' '.join(part_before_kg[:-1]) + f' <b>[ {weight_value} ]</b>' + ' –∫–≥'

    first_half = ' –∫–≥'.join(workout[0:weight_index])
    if first_half:
        first_half += ' –∫–≥'
    workout_in_process = first_half + workout_in_process + ' –∫–≥'.join(workout[weight_index + 1:])

    return workout_in_process


async def process_workout(
        workout_in_process,
        data,
        state,
        message,
        kb,
        user_id=None,
        return_to_training=False
):
    from app.handlers import bot

    async def edit_message_text_def(text, chat_id, message_id, **kwargs):
        await bot.edit_message_text(text, chat_id, message_id, **kwargs)

    if user_id is None:
        user_id = message.from_user.id
    workout_in_process = workout_in_process.replace('<b>[ ', '').replace(' ]</b>', '')
    data['workout'] = workout_in_process.split(' –∫–≥')

    if data['weight_index'] == len(data['workout']) - 2:
        await state.set_state(BaseStates.show_trainings)

        for i in range(len(data['workout']) - 1):
            cur_segment = data['workout'][i].split('\n')[-1].split(' ')
            cur_segment = [x for x in cur_segment if x]
            name = ' '.join(cur_segment[:-2])
            weight = cur_segment[-1]

            await dal.Exercises.add_exercise(name)
            await dal.UserResults.update_user_results(
                user_id=user_id,
                name=name,
                weight=weight
            )

        first_training = await dal.User.check_if_first_training_by_user_id(user_id)
        if first_training:
            await edit_message_text_def(text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø–µ—Ä–≤—ã–º —É—Å–ø–µ—à–Ω—ã–º –∑–∞–Ω—è—Ç–∏–µ–º!',
                                                  chat_id=message.chat.id,
                                                  message_id=data['message']
                                                  )
            await asyncio.sleep(1)

        else:
            await edit_message_text_def(text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
                                                  chat_id=message.chat.id,
                                                  message_id=data['message']
                                                  )
            await asyncio.sleep(1)

        await message.answer('–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω (7-8 —á–∞—Å–æ–≤) –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —è–≤–ª—è—é—Ç—Å—è '
                             '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ–≥—Ä–∞–º–º—ã, '
                             '–±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!')
        await asyncio.sleep(1)

        await dal.Trainings.update_trainings(
            user_id=user_id,
            day=data['day'],
            data=workout_in_process,
            active=False
        )
        training, new_day = await dal.Trainings.get_next_training(
            user_id=user_id,
            current_day=data['day']
        )
        if training:
            await dal.Trainings.update_active_training_by_day(
                user_id=user_id,
                day=new_day,
                active=True
            )

        else:
            await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ')
            await asyncio.sleep(2)
            training, new_day = await dal.Trainings.get_trainings_by_day(
                user_id=user_id,
                day=1
            )

        subscribed = await dal.User.check_if_subscribed_by_user_id(user_id)
        if not subscribed and first_training:
            await dal.User.update_first_training_parameter(user_id)

            await message.answer(
                'üåü –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –∏ –¥–ª—è –≤–∞—Å –≤–∞–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, '
                '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!',
                reply_markup=kb.always_markup
            )
            await asyncio.sleep(1)
            await message.answer(
                'üìà –¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ä–∞–∑–º–µ—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –º–µ–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω—è—Ç–∏–π '
                '–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑—ã.'
            )
            await asyncio.sleep(1)
            await message.answer("–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                                 "‚ñ´Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫;\n"
                                 "‚ñ´Ô∏è–í—ã—Å–æ–∫–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (—Å –æ–ø–æ—Ä–æ–π –Ω–∞ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã);\n"
                                 "‚ñ´Ô∏è–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫;\n"
                                 "‚ñ´Ô∏è–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ;\n"
                                 "‚ñ´Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å—ë–º –ø–µ—Ä–∏–æ–¥–µ –∑–∞–Ω—è—Ç–∏–π")
            await asyncio.sleep(1)
            await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ 399 —Ä—É–±/–º–µ—Å.')
            await asyncio.sleep(1)
            await message.answer(
                '–û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Health AI –∏ –º–µ–Ω—è–π—Ç–µ—Å—å –∫ –ª—É—á—à–µ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!',
                reply_markup=kb.subscribe_proposition
            )

        else:
            await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º', reply_markup=kb.always_markup)
            await asyncio.sleep(1.5)

            data['workout'] = training
            data['day'] = new_day

            await message.answer(
                f'–î–µ–Ω—å {data["day"]}\n' + training,
                reply_markup=kb.trainings_tab,
                parse_mode='HTML'
            )

    else:
        await state.set_state(BaseStates.start_workout)
        if not return_to_training:
            data['weight_index'] += 1
        current_weight = data['workout'][data['weight_index']].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        await edit_message_text_def(text=f'–î–µ–Ω—å {data["day"]}\n' + workout_in_process,
                                    chat_id=message.chat.id,
                                    message_id=data['message'],
                                    reply_markup=kb.insert_weights_in_workout,
                                    parse_mode='HTML'
                                    )


async def get_training_markup(user_id, day, ):
    next_training, _ = await dal.Trainings.get_next_training(
        user_id=user_id,
        current_day=day
    )

    reply_markup = kb.trainings_tab
    if next_training is None:
        reply_markup = kb.trainings_tab_without_next

    else:
        prev_training, _ = await dal.Trainings.get_prev_training(
            user_id=user_id,
            current_day=day
        )
        if prev_training is None:
            reply_markup = kb.trainings_tab_without_prev

    return reply_markup
