import asyncio
import os
import pathlib

from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types.message import ContentType

from dotenv import load_dotenv
from loguru import logger

import dal
from utils import process_prompt, process_prompt_next_week, split_workout, process_workout, get_training_markup, \
    proccess_meal_plan_prompt, complete_training
from app import keyboards as kb
from gpt.chat import ChatGPT
from .states import PersonChars, BaseStates, Admin, SubStates

# ----- –°–¢–ê–†–¢ –ò –ü–û–î–ü–ò–°–ö–ê ---------

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
storage = RedisStorage2('localhost', 6379, db=5, pool_size=10, prefix='my_fsm_key')
dp = Dispatcher(bot=bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü', amount=399 * 100)


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if state:
        await state.finish()

    await dal.Starts.update_starts(message.from_user.id)
    logger.info('start')
    user = await dal.User.select_attributes(message.from_user.id)
    trainings, day = await dal.Trainings.get_active_training_by_user_id(message.from_user.id)
    logger.info(f'user - {user}')

    if user and trainings:
        if message.from_user.id in [635237071, 284863184]:
            await message.answer('–≠–¢–û –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨', reply_markup=kb.always_markup)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                 reply_markup=kb.main_admin)
        else:
            await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=kb.always_markup)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                 reply_markup=kb.main)
    else:
        await message.answer(
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n'
            '–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä Health AI.\n\n'
            'üéØ <b>–°–æ—Å—Ç–∞–≤–ª—é</b> –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –≤–∞—Å <b>–ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ '
            '–∏ –ø–∏—Ç–∞–Ω–∏—è</b> —Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ 9 –Ω–µ–¥–µ–ª—å;\n\n'
            '<i>–ü—Ä–∏—Å—Ç—É–ø–∞—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ '
            '<a href="https://health-ai.ru/ai">–Ω–∞—à–µ–º —Å–∞–π—Ç–µ</a>.</i>',
            reply_markup=kb.main_new,
            parse_mode='HTML'
        )


@dp.callback_query_handler(state='*', text='ADMIN_go_to_assistant_testing')
async def go_to_assistant_training(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Admin.assistant_training)
    global this_gpt
    this_gpt = ChatGPT(os.getenv('ASSISTANT_ID'))
    await this_gpt.create_thread()
    await callback.message.edit_text('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.')
    await asyncio.sleep(0.5)
    await callback.message.answer('–î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ */start* –∏ –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ –∑–∞–Ω–æ–≤–æ',
                                  parse_mode='Markdown')
    await asyncio.sleep(0.5)
    await callback.message.answer('–ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')


@dp.message_handler(state=Admin.assistant_training)
async def assistant_message(message: types.Message, state: FSMContext):
    await this_gpt.add_message(message.text)
    status = await this_gpt.create_run()

    while status.status != 'completed':
        status = await this_gpt.get_run_status()
        await asyncio.sleep(5)

    messages = await this_gpt.get_all_messages()
    await message.answer(messages.data[0].content[0].text.value)


# @dp.callback_query_handler(state='*', text='generate_trainings')
# async def generate_trainings(callback: types.CallbackQuery, state: FSMContext):
#     temp_message = await callback.message.answer(
#         '‚è≥–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
#     )
#
#     await state.set_state(BaseStates.show_trainings)
#
#     await process_prompt(
#         user_id=callback.from_user.id
#     )
#
#     await dal.Trainings.update_active_training_by_day(
#         user_id=callback.from_user.id,
#         day=1,
#         active=True
#     )
#
#     training, new_day = await dal.Trainings.get_trainings_by_day(
#         user_id=callback.from_user.id,
#         day=1
#     )
#     async with state.proxy() as data:
#         data['day'] = 1
#         data['workout'] = training
#
#     await temp_message.edit_text(
#         '‚úÖ –ü–ª–∞–Ω –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–æ—Ç–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é!'
#     )
#     await asyncio.sleep(2)
#     await callback.message.answer(
#         training,
#         reply_markup=kb.trainings_tab
#     )


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True, error_message='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message, state: FSMContext):
    if await state.get_state() == SubStates.trainings_and_food:
        logger.info(f'–û–ø–ª–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü')
        await message.answer(
            '‚≠êÔ∏è –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! ‚≠ê\n\n'
            '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n\n'
            '‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ 1 –º–µ—Å—è—Ü\n\n'
            '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n'
            '‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n\n'
            '‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n\n\n'
            '‚ú≥Ô∏è –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n'
            '~ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!'
        )
        await dal.User.update_subscription_type(message.from_user.id, 1)

    elif await state.get_state() == SubStates.trainings_and_food_9_weeks:
        logger.info(f'–û–ø–ª–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - —Ä–∞–∑–æ–≤–æ 9 –Ω–µ–¥–µ–ª—å')
        await message.answer(
            '‚≠êÔ∏è –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! ‚≠ê\n\n'
            '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n\n'
            '‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ 9 –Ω–µ–¥–µ–ª—å\n\n'
            '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n'
            '‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n\n'
            '‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n\n\n'
            '‚ú≥Ô∏è –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n'
            '~ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!'
        )
        await dal.User.update_subscription_type(message.from_user.id, 2)

    await state.set_state(BaseStates.end_of_week_changes)
    temp_message = await message.answer('–ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, '
                                        '–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–Ω–µ—Å—Ç–∏ '
                                        '–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ü–µ–ª–æ–º '
                                        '(–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)')
    async with state.proxy() as data:
        data['temp_message'] = temp_message.message_id


@dp.message_handler(state='*', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_to_menu(message: types.Message, state: FSMContext):
    if state:
        await state.finish()

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.main
    )


@dp.message_handler(state='*', text='–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
async def support(message: types.Message, state: FSMContext):
    await state.set_state(BaseStates.support)

    await message.answer(
        '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?',
        reply_markup=kb.support
    )


@dp.callback_query_handler(state=BaseStates.support, text='tech_support')
async def tech_support(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–°–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ https://t.me/sergey_akhapkin1703')

    await state.finish()

    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.main
    )


@dp.callback_query_handler(state=BaseStates.support, text='add_review')
async def add_review(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BaseStates.add_review)
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤')


@dp.message_handler(state=BaseStates.add_review)
async def write_review(message: types.Message, state: FSMContext):
    await dal.Reviews.add_review(message.from_user.id, message.text)

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
    await state.finish()

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.main
    )


# ----- –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ---------


@dp.callback_query_handler(state='*', text=['SHOW_TIMETABLE', 'back_to_timetable'])
async def show_timetable(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BaseStates.start_workout)
    training, day = await dal.Trainings.get_active_training_by_user_id(callback.from_user.id)
    subscription_type = await dal.User.check_sub_type_by_user_id(callback.from_user.id)
    week = await dal.User.select_week(callback.from_user.id)

    if training:
        async with state.proxy() as data:
            data['day'] = day
            if 'weight_index' not in data.keys():
                data['weight_index'] = 0
            data['workout'] = training.split(' –∫–≥')

        if week == 0:
            reply_markup = kb.insert_weights_in_workout
        else:
            reply_markup = kb.trainings_tab_without_prev

        await callback.message.edit_text(
            f'<b>–î–µ–Ω—å {day}</b>\n' + f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' + training,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    elif not subscription_type:
        await state.set_state(BaseStates.subscription_proposition)
        await callback.message.edit_text('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É.')
        await asyncio.sleep(1.5)
        await callback.message.answer('„Ä∞ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏, '
                                      '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –∫—É–ø–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ 9 –Ω–µ–¥–µ–ª—å:\n\n'
                                      '‚Ä¢ 199 —Ä—É–±./ –º–µ—Å. (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏+–ø–∏—Ç–∞–Ω–∏–µ)\n\n'
                                      '‚Ä¢ 399 —Ä—É–±./ 9 –Ω–µ–¥–µ–ª—å (<i>–≤–º–µ—Å—Ç–æ <s>507</s> —Ä—É–±.)~ —Å –ø–∏—Ç–∞–Ω–∏–µ–º</i>\n\n\n',
                                      parse_mode='HTML')
        await asyncio.sleep(2)

        await callback.message.answer(
            '–§—É–Ω–∫—Ü–∏–∏:\n\n'
            'üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b> –Ω–∞ 9 –Ω–µ–¥–µ–ª—å, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è <b>–¥–ª—è –≤–∞—Å, '
            '—É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è</b>\n\n\n'
            'üçè <b>–ò–∑–º–µ–Ω—è—é—â–∏–π—Å—è –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</b> –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n\n'
            '‚öô –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>–º–µ–Ω—è—Ç—å –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–¥ —Å–µ–±—è\n\n\n'
            'üéØ <b>–ù–∞–∏–≤—ã—Å—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> –∑–∞ —Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞\n\n\n'
            'üõü <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> –Ω–∞ –≤—Å—ë–º –ø–µ—Ä–∏–æ–¥–µ –∑–∞–Ω—è—Ç–∏–π',
            parse_mode='HTML',
            reply_markup=kb.subscribe
        )
    else:
        weeks_left = await dal.User.select_weeks_left(callback.from_user.id)

        if weeks_left != 0:
            await state.set_state(BaseStates.end_of_week_changes)
            await callback.message.edit_text(
                '–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–∫! '
                '–ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, '
                '–Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–Ω–µ—Å—Ç–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ü–µ–ª–æ–º '
                '(–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)',
            )

        else:
            await callback.message.edit_text(
                f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é {week} –Ω–µ–¥–µ–ª—é, –∏ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. '
                f'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                reply_markup=kb.subscribe
            )


@dp.callback_query_handler(state=BaseStates.end_of_trial, text='subscribe_later')
async def back_to_menu(message: types.Message, state: FSMContext):
    if state:
        await state.finish()

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.main
    )


@dp.callback_query_handler(state='*', text=['next_workout', 'prev_workout'])
async def switch_days(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:

        await state.set_state(BaseStates.show_trainings)
        if callback.data == 'next_workout':
            training, new_day, active = await dal.Trainings.get_next_training(
                user_id=callback.from_user.id,
                current_day=data['day']
            )
            if training:
                data['day'] = new_day
                data['workout'] = training

            else:
                training, new_day, active = await dal.Trainings.get_trainings_by_day(
                    user_id=callback.from_user.id,
                    day=1
                )
                data['day'] = 1
                data['workout'] = training

        elif callback.data == 'prev_workout':
            training, new_day, active = await dal.Trainings.get_prev_training(
                user_id=callback.from_user.id,
                current_day=data['day']
            )
            if training:
                data['day'] = new_day
                data['workout'] = training

            else:
                training, new_day, active = await dal.Trainings.get_prev_training(
                    user_id=callback.from_user.id,
                    current_day=1000000
                )
                data['day'] = new_day
                data['workout'] = training

        reply_markup = await get_training_markup(callback.from_user.id, data['day'])
        await callback.message.edit_text(
            f'<b>–î–µ–Ω—å {data["day"]}</b>\n' + (f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' if active else '') + training,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


@dp.callback_query_handler(state=BaseStates.show_trainings, text='rebuild_workouts')
async def ask_client_for_changes(callback: types.CallbackQuery, state: FSMContext):
    user = await dal.User.select_attributes(callback.from_user.id)
    if callback.from_user.id == 913925619:
        if user.rebuilt > 31:
            await callback.answer(
                '–í—ã —É–∂–µ 30 —Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –Ω–µ–¥–µ–ª—é'
            )
        else:
            await callback.message.answer(
                '–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. '
                '(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å 1 —Ä–∞–∑ –≤ –ø—Ä–æ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ —É–±—Ä–∞—Ç—å)'
            )
            await state.set_state(BaseStates.rebuild_workouts)
    elif user.rebuilt == 1:
        await callback.answer(
            '–í—ã —É–∂–µ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –Ω–µ–¥–µ–ª—é'
        )

    else:
        await callback.message.answer(
            '–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. '
            '(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å 1 —Ä–∞–∑ –≤ –ø—Ä–æ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ —É–±—Ä–∞—Ç—å)'
        )
        await state.set_state(BaseStates.rebuild_workouts)


@dp.message_handler(state=BaseStates.rebuild_workouts)
async def rebuild_workouts(message: types.Message, state: FSMContext):
    await message.answer(
        '‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 2-—Ö –º–∏–Ω—É—Ç, –∏–∏-—Ç—Ä–µ–Ω–µ—Ä —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.'
    )

    await state.set_state(BaseStates.show_trainings)

    await dal.User.increase_rebuilt_param(message.from_user.id)

    attempts = 0
    while attempts < 3:
        try:
            await process_prompt_next_week(
                user_id=message.from_user.id,
                client_edits_next_week=message.text
            )
            break
        except Exception as exc:
            logger.error(f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
            attempts += 1

    await dal.Trainings.update_active_training_by_day(
        user_id=message.from_user.id,
        day=1,
        active=True
    )

    training, new_day, active = await dal.Trainings.get_trainings_by_day(
        user_id=message.from_user.id,
        day=1
    )
    async with state.proxy() as data:
        data['day'] = 1
        data['workout'] = training

    await message.answer(
        'üí°–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é'
    )

    await message.answer(
        f'<b>–î–µ–Ω—å {data["day"]}</b>\n' + (f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' if active else '') + training,
        reply_markup=kb.trainings_tab,
        parse_mode='HTML'
    )


@dp.callback_query_handler(state=BaseStates.show_trainings, text='start_workout')
async def prestart_workout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '‚òùÔ∏è –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –≤–µ—Å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º. '
        '–ï—Å–ª–∏ –≤–∞–º —Ç—è–∂–µ–ª–æ –∏–ª–∏ –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –∫–∞–∫–∏–º-—Ç–æ –≤–µ—Å–æ–º, '
        '–ø–æ–º–µ–Ω—è–π—Ç–µ –µ–≥–æ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await asyncio.sleep(1.5)
    await callback.message.answer(
        '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!'
    )
    await asyncio.sleep(1.5)
    await state.set_state(BaseStates.start_workout)
    async with state.proxy() as data:
        data['weight_index'] = 0
        data['workout'], data['day'] = await dal.Trainings.get_active_training_by_user_id(callback.from_user.id)
        data['workout'] = data['workout'].split(' –∫–≥')
    await callback.message.answer(
        '‚òù–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–π–¥–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–∏–ª–∏ –ø–æ —Ö–æ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π), '
        '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è. '
        '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n–•–æ—Ä–æ—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
        reply_markup=kb.start_workout
    )


@dp.callback_query_handler(state=BaseStates.start_workout, text='go_back')
async def go_back_to_trainings(callback: types.CallbackQuery, state: FSMContext):
    training, new_day, active = await dal.Trainings.get_trainings_by_day(
        user_id=callback.from_user.id,
        day=1
    )
    async with state.proxy() as data:
        data['day'] = 1
        data['workout'] = training

    await state.set_state(BaseStates.show_trainings)

    await callback.message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º', reply_markup=kb.always_markup)
    await asyncio.sleep(1.5)

    await callback.message.answer(
        f'<b>–î–µ–Ω—å {data["day"]}</b>\n' + (f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' if active else '') + training,
        reply_markup=kb.trainings_tab,
        parse_mode='HTML'
    )


@dp.callback_query_handler(state=BaseStates.start_workout, text='insert_weights')
async def begin_workout(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await dal.Trainings.update_in_progress_training_by_day(
            user_id=callback.from_user.id,
            day=data['day'],
            in_progress=True
        )
        current_weight = data['workout'][0].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        await callback.message.answer(
            f'<b>–î–µ–Ω—å {data["day"]}</b>\n' + f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' + workout_in_process,
            reply_markup=kb.insert_weights_in_workout,
            parse_mode='HTML'
        )


@dp.callback_query_handler(state=BaseStates.start_workout, text='add_weight')
async def add_weight_callback(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = callback.message.message_id
        if 'weight_index' not in data.keys():
            data['weight_index'] = 0
        data['exercises'] = ' –∫–≥'.join(data['workout']).replace('\n\n', '\n').split('\n')
        data['exercises'] = [line for line in data['exercises'] if len(line) > 5 and ' –∫–≥' in line]

        data['new_text'] = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å: \n' + data['exercises'][data['weight_index']]
        temp_message = await callback.message.answer(
            data['new_text'],
            reply_markup=kb.insert_weight,
            parse_mode='HTML'
        )
        data['temp_message'] = temp_message.message_id
    await state.set_state(BaseStates.add_weight)


@dp.message_handler(state=BaseStates.add_weight)
async def add_weight_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        message_text = data['new_text']

        if message.text.isdigit() is False:
            await bot.edit_message_text(
                message_text + '\n\n<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</b>',
                chat_id=message.chat.id,
                message_id=data['temp_message'],
                reply_markup=kb.insert_weight,
                parse_mode='HTML'
            )

            await message.delete()

        elif int(message.text) > 300:
            await bot.edit_message_text(
                message_text + '\n\n<b>–ü–æ—Ö–æ–∂–µ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ</b>',
                chat_id=message.chat.id,
                message_id=data['temp_message'],
                reply_markup=kb.insert_weight,
                parse_mode='HTML'
            )

            await message.delete()

        else:
            await message.delete()

            workout_in_process = await split_workout(data['workout'], data['weight_index'], int(message.text))
            await process_workout(workout_in_process, data, state, message, kb)

            if await state.get_state() != BaseStates.show_trainings:
                data['new_text'] = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å: \n' + data['exercises'][data['weight_index']]
                temp_message = await bot.edit_message_text(
                    data['new_text'],
                    chat_id=message.chat.id,
                    message_id=data['temp_message'],
                    reply_markup=kb.insert_weight,
                    parse_mode='HTML'
                )
                data['temp_message'] = temp_message.message_id


@dp.callback_query_handler(state=BaseStates.add_weight, text='next_exercise')
async def next_exercise(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        current_weight = data['workout'][data['weight_index']].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        await process_workout(
            workout_in_process,
            data,
            state,
            callback.message,
            kb,
            user_id=callback.from_user.id,
            skip_db=True
        )

        if await state.get_state() != BaseStates.show_trainings:
            try:
                data['new_text'] = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å: \n' + data['exercises'][data['weight_index']]
                temp_message = await callback.message.edit_text(
                    data['new_text'],
                    reply_markup=kb.insert_weight,
                    parse_mode='HTML'
                )
                data['temp_message'] = temp_message.message_id
            except Exception as exc:
                logger.error(exc)
                pass


@dp.callback_query_handler(state=BaseStates.add_weight, text='prev_exercise')
async def prev_exercise(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        current_weight = data['workout'][data['weight_index']].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        data['weight_index'] -= 1
        await process_workout(
            workout_in_process,
            data,
            state,
            callback.message,
            kb,
            user_id=callback.from_user.id,
            return_to_training=True,
            skip_db=True
        )

        if await state.get_state() != BaseStates.show_trainings:
            data['new_text'] = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å: \n' + data['exercises'][data['weight_index']]
            temp_message = await callback.message.edit_text(
                data['new_text'],
                reply_markup=kb.insert_weight,
                parse_mode='HTML'
            )
            data['temp_message'] = temp_message.message_id


@dp.callback_query_handler(state=BaseStates.start_workout, text='complete_workout')
async def ask_to_leave_workout(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = callback.message.message_id
    await callback.message.answer(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?', reply_markup=kb.complete_workout)


@dp.callback_query_handler(state=BaseStates.start_workout, text='yes')
async def complete_workout(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = callback.message.message_id
        current_weight = data['workout'][data['weight_index']].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        await complete_training(workout_in_process, data, state, callback.message, kb, user_id=callback.from_user.id)


@dp.message_handler(state=BaseStates.end_of_week_changes)
async def get_end_of_week_changes_from_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text) > 100:
            await bot.delete_message(message.chat.id, message.message_id)
            temp_message = await bot.edit_message_text('–í–∞—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤',
                                                       message.chat.id, data['temp_message'])
            data['temp_message'] = temp_message.message_id
        else:
            await message.answer('‚è≥–í–∞—à–∏ –ø—Ä–∞–≤–∫–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã, —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')

            attempts = 0
            while attempts < 3:
                try:
                    await process_prompt_next_week(
                        user_id=message.from_user.id
                    )
                    break
                except Exception as exc:
                    logger.error(f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
                    attempts += 1

            await dal.Trainings.update_active_training_by_day(
                user_id=message.from_user.id,
                day=1,
                active=True
            )
            training, new_day, active = await dal.Trainings.get_trainings_by_day(
                user_id=message.from_user.id,
                day=1
            )
            async with state.proxy() as data:
                data['day'] = 1
                data['workout'] = training

            await message.answer(
                '‚úÖ –ü–ª–∞–Ω –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é!',
                reply_markup=kb.always_markup
            )
            await asyncio.sleep(2)
            await message.answer(
                f'<b>–î–µ–Ω—å {data["day"]}</b>\n' + (f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' if active else '') + training,
                reply_markup=kb.trainings_tab,
                parse_mode='HTML'
            )


@dp.callback_query_handler(state=[BaseStates.show_trainings, BaseStates.end_of_trial], text='get_subscription')
async def get_subscription(callback: types.CallbackQuery, state: FSMContext):
    if os.getenv('PAYMENTS_TOKEN').split(':')[1] == 'TEST':
        await bot.send_invoice(callback.message.chat.id,
                               title='–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI',
                               description='–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI',
                               provider_token=os.getenv('PAYMENTS_TOKEN'),
                               provider_data={
                                   "receipt": {
                                       "items": [
                                           {
                                               "description": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI",
                                               "quantity": "1",
                                               "amount": {"value": "399.00", "currency": "RUB"},
                                               "vat_code": 1
                                           }
                                       ],
                                       "customer": {"email": "borisus.amusov@mail.ru"}
                                   }
                               },
                               currency='rub',
                               photo_url='/home/boris/TelegramBots/Health_AI/img/logo.jpg',
                               photo_width=1270,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter='one-month-subscription',
                               payload='test-invoice-payload')
    else:
        await bot.send_invoice(callback.message.chat.id,
                               title='–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI',
                               description='–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI',
                               provider_token=os.getenv('PAYMENTS_TOKEN'),
                               provider_data={
                                   "receipt": {
                                       "items": [
                                           {
                                               "description": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI",
                                               "quantity": "1",
                                               "amount": {"value": "399.00", "currency": "RUB"},
                                               "vat_code": 1
                                           }
                                       ],
                                       "customer": {"email": "borisus.amusov@mail.ru"}
                                   }
                               },
                               currency='rub',
                               photo_url='/home/boris/TelegramBots/Health_AI/img/logo.jpg',
                               photo_width=1270,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter='one-month-subscription',
                               payload='subscription-payload')


@dp.callback_query_handler(state=BaseStates.show_trainings, text='subscribe_later')
async def subscribe_later(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.always_markup)
    await asyncio.sleep(1.5)

    if callback.message.from_user.id in [635237071, 284863184]:
        await callback.message.answer('–≠–¢–û –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨', reply_markup=kb.always_markup)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                      reply_markup=kb.main_admin)
    else:
        await callback.message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=kb.always_markup)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                      reply_markup=kb.main)


@dp.callback_query_handler(state=[BaseStates.start_workout, BaseStates.add_weight], text=['no', 'return_to_training'])
async def do_not_leave_workout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(BaseStates.start_workout)


@dp.callback_query_handler(state=[BaseStates.start_workout, BaseStates.add_weight], text='meal_plan')
async def go_to_meal_plan(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BaseStates.meals)
    async with state.proxy() as data:
        try:
            await bot.delete_message(callback.message.chat.id, data['temp_message'])
        except:
            pass

    meals = await dal.Meals.get_all_meals_by_user_id(callback.from_user.id)
    if meals:
        meal_plan = meals[0].meal_plan
        await callback.message.edit_text(
            meal_plan,
            reply_markup=kb.meal_plan,
            parse_mode='HTML'
        )
    else:
        await callback.message.edit_text(
            '‚è≥–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ (–Ω–µ –±–æ–ª–µ–µ 2—Ö –º–∏–Ω—É—Ç)‚Ä¶'
        )

        meal_plan = await proccess_meal_plan_prompt(callback.from_user.id)

        await callback.message.edit_text(
            'üçè –í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω! \n\n'
            '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!'
        )

        await callback.message.edit_text(
            meal_plan,
            reply_markup=kb.meal_plan,
            parse_mode='HTML'
        )


@dp.callback_query_handler(state=BaseStates.meals, text='go_to_workout')
async def go_to_workout(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await state.set_state(BaseStates.start_workout)

        data['message'] = callback.message.message_id
        data['workout'], data['day'] = await dal.Trainings.get_active_training_by_user_id(callback.from_user.id)
        data['workout'] = data['workout'].split(' –∫–≥')

        if 'weight_index' not in data.keys():
            data['weight_index'] = 0

        current_weight = data['workout'][data['weight_index']].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)

        await process_workout(
            workout_in_process,
            data,
            state,
            callback.message,
            kb,
            user_id=callback.from_user.id,
            return_to_training=True,
            skip_db=True
        )


@dp.callback_query_handler(state=BaseStates.subscription_proposition, text='watch_proposition')
async def go_to_workout(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SubStates.show_add_training)
    await callback.message.answer('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 2-—Ö –º–∏–Ω—É—Ç, –∏–∏-—Ç—Ä–µ–Ω–µ—Ä —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.')

    attempts = 0
    training = None
    while attempts < 3:
        try:
            training = await process_prompt_next_week(
                user_id=callback.from_user.id,
                demo=True
            )
            break
        except Exception as exc:
            logger.error(f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
            attempts += 1

    if training is None:
        await callback.message.answer(f'–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                                      f'–ù–∞–ø–∏—à–∏—Ç–µ */start* —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.',
                                      parse_mode='Markdown')
    else:
        await callback.message.answer(training, reply_markup=kb.continue_keyboard, parse_mode='HTML')


@dp.callback_query_handler(
    state=[SubStates.show_add_training, BaseStates.subscription_proposition],
    text=['continue', 'skip_proposition']
)
async def go_to_workout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '„Ä∞Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è  –∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ '
        '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –∫—É–ø–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ 9 –Ω–µ–¥–µ–ª—å:\n\n\n'
        '‚Ä¢ 199 —Ä—É–±./ –º–µ—Å. (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏+–ø–∏—Ç–∞–Ω–∏–µ)\n\n'
        '‚Ä¢ 399 —Ä—É–±./ 9 –Ω–µ–¥–µ–ª—å (–≤–º–µ—Å—Ç–æ 507 —Ä—É–±.)~ —Å –ø–∏—Ç–∞–Ω–∏–µ–º\n\n\n\n'
        '–§—É–Ω–∫—Ü–∏–∏:\n\n'
        'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –Ω–∞ 9 –Ω–µ–¥–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–ª—è –≤–∞—Å, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è\n\n\n'
        'üçè –ò–∑–º–µ–Ω—è—é—â–∏–π—Å—è –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n\n'
        '‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–¥ —Å–µ–±—è\n\n\n'
        'üéØ –ù–∞–∏–≤—ã—Å—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞\n\n\n'
        'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å—ë–º –ø–µ—Ä–∏–æ–¥–µ –∑–∞–Ω—è—Ç–∏–π',
        reply_markup=kb.subscribe
    )


@dp.callback_query_handler(
    state=[SubStates.show_add_training,
           BaseStates.subscription_proposition,
           SubStates.trainings_and_food,
           SubStates.trainings_and_food_9_weeks
           ],
    text=['trainings_and_food', 'trainings_and_food_9_weeks', 'skip_proposition'])
async def subscribe(callback: types.CallbackQuery, state: FSMContext):
    if os.getenv('PAYMENTS_TOKEN').split(':')[1] == 'TEST':
        payload = 'test-invoice-payload'
    else:
        payload = 'subscription-payload'

    if callback.data == 'trainings_and_food':
        await state.set_state(SubStates.trainings_and_food)
        NEW_PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü \n(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏+–ø–∏—Ç–∞–Ω–∏–µ)', amount=199 * 100)
        amount = {
            'value': '199.00',
            'currency': 'RUB'
        }
        description = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏+–ø–∏—Ç–∞–Ω–∏–µ)'
    else:  # callback.data == 'trainings_and_food_9_weeks':
        await state.set_state(SubStates.trainings_and_food_9_weeks)
        NEW_PRICE = types.LabeledPrice(label='–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞ –Ω–∞ 9 –Ω–µ–¥–µ–ª—å', amount=399 * 100)
        amount = {
            'value': '399.00',
            'currency': 'RUB'
        }
        description = '–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞ –Ω–∞ 9 –Ω–µ–¥–µ–ª—å'

    await bot.send_invoice(callback.message.chat.id,
                           title=description,
                           description=description,
                           provider_token=os.getenv('PAYMENTS_TOKEN'),
                           provider_data={
                               "receipt": {
                                   "items": [
                                       {
                                           "description": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å HealthAI",
                                           "quantity": "1",
                                           "amount": amount,
                                           "vat_code": 1
                                       }
                                   ],
                                   "customer": {"email": "borisus.amusov@mail.ru"}
                               }
                           },
                           currency='rub',
                           photo_url='/home/boris/TelegramBots/Health_AI/img/logo.jpg',
                           photo_width=1270,
                           is_flexible=False,
                           prices=[NEW_PRICE],
                           start_parameter='one-month-subscription',
                           payload=payload)


# ----- –ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---------


@dp.callback_query_handler(state='*', text=['update_data', 'insert_data'])
async def create_edit(callback: types.CallbackQuery):
    await asyncio.sleep(1.5)
    await callback.message.answer(
        'üèÉüèΩ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª—Å—è!\n\n'
        '*–°–µ–π—á–∞—Å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:*\n\n'
        '‚Ä¢ *1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞* —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é *–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏* –Ω–∞ –≤–∞—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö (–µ—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è);\n\n'
        '‚Ä¢ –í–Ω–µ—Å–µ–Ω–∏–µ *—Å–≤–æ–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤* –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏ *–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 7-–π* –Ω–µ–¥–µ–ª–∏;\n\n'
        '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä *–≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è* –Ω–∞ 9 –Ω–µ–¥–µ–ª—å;\n\n'
        '‚Ä¢ *–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å* –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å *–≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏*',
        parse_mode='Markdown'
    )
    await asyncio.sleep(1.5)
    await callback.message.answer(
        'üí¨ –û—Å—Ç–∞–ª–æ—Å—å *–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã* –∏ –≤–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!\n\n'
        '(—á—Ç–æ–±—ã –ø–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É, –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã" –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É)',
        parse_mode='Markdown',
        reply_markup=kb.user_info
    )
    await asyncio.sleep(1.5)
    await callback.message.answer(
        '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª',
        reply_markup=kb.gender
    )
    await PersonChars.gender.set()


@dp.message_handler(state='*', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã')
async def beginning_of_user_info(message: types.Message):
    await message.answer(
        '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª',
        reply_markup=kb.gender
    )
    await PersonChars.gender.set()


@dp.callback_query_handler(state=PersonChars.gender)
async def add_sex(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback.data == 'gender_man':
            data['gender'] = '–ú—É–∂—Å–∫–æ–π'
        if callback.data == 'gender_woman':
            data['gender'] = '–ñ–µ–Ω—Å–∫–∏–π'

        info_message = await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ü–æ–ª–Ω—ã—Ö –ª–µ—Ç)')
        data['info_message'] = info_message.message_id
        await PersonChars.age.set()


@dp.message_handler(state=PersonChars.age)
async def add_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() is False:
            try:
                await bot.delete_message(message.chat.id, data['info_message'])
            except Exception as exc:
                pass
            await message.delete()

            info_message = await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. '
                                                '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ü–æ–ª–Ω—ã—Ö –ª–µ—Ç)')
            data['info_message'] = info_message.message_id

        else:
            data['age'] = int(message.text)

            await message.delete()
            await bot.edit_message_text(
                '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç (—Å–º)',
                chat_id=message.chat.id,
                message_id=data['info_message']
            )
            await PersonChars.height.set()


@dp.message_handler(state=PersonChars.height)
async def add_height(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() is False:
            try:
                await bot.delete_message(message.chat.id, data['info_message'])
            except Exception as exc:
                pass
            await message.delete()

            info_message = await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            data['info_message'] = info_message.message_id
        else:
            data['height'] = int(message.text)

            await message.delete()
            await bot.edit_message_text(
                '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–∫–≥)',
                chat_id=message.chat.id,
                message_id=data['info_message']
            )
            await PersonChars.weight.set()


@dp.message_handler(state=PersonChars.weight)
async def add_weight(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() is False:
            try:
                await bot.delete_message(message.chat.id, data['info_message'])
            except Exception as exc:
                pass
            await message.delete()

            info_message = await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            data['info_message'] = info_message.message_id
        else:
            data['weight'] = int(message.text)

            await message.delete()
            await bot.edit_message_text(
                '–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
                chat_id=message.chat.id,
                message_id=data['info_message'],
                reply_markup=kb.gym_experience
            )
            await PersonChars.gym_experience.set()


@dp.callback_query_handler(state=PersonChars.gym_experience)
async def add_gym_experience(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['gym_experience'] = callback.data
    if callback.data in ['medium', 'experienced']:
        await callback.message.edit_text(
            '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–µ—Å–∞ –≤ –∂–∏–º–µ –ª–µ–∂–∞, —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ –∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è—Ö —Å–æ —à—Ç–∞–Ω–≥–æ–π?',
            reply_markup=kb.max_results
        )
        await PersonChars.max_results.set()
    else:
        await callback.message.edit_text(
            '–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?',
            reply_markup=kb.expected_results
        )
        await PersonChars.goals.set()


@dp.callback_query_handler(state=PersonChars.max_results)
async def ask_max_results(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback.data == 'yes':
            info_message = await callback.message.edit_text(
                '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∂–∏–º–µ –ª–µ–∂–∞ (–£—á–∏—Ç—ã–≤–∞—è –≤–µ—Å —à—Ç–∞–Ω–≥–∏ 20 –∫–≥, —É–∫–∞–∑–∞—Ç—å –≤ –∫–≥):'
            )
            data['info_message'] = info_message.message_id
            await PersonChars.bench_results.set()

        if callback.data == 'no':
            info_message = await callback.message.edit_text(
                '–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?',
                reply_markup=kb.expected_results
            )
            data['info_message'] = info_message.message_id
            await PersonChars.goals.set()


@dp.message_handler(state=PersonChars.bench_results)
async def add_bench_results(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() is False:
            try:
                await bot.delete_message(message.chat.id, data['info_message'])
            except Exception as exc:
                pass
            await message.delete()

            info_message = await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            data['info_message'] = info_message.message_id
        else:
            data['bench_results'] = int(message.text)

            await message.delete()
            info_message = await bot.edit_message_text(
                '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ (–£—á–∏—Ç—ã–≤–∞—è –≤–µ—Å —à—Ç–∞–Ω–≥–∏ 20 –∫–≥, —É–∫–∞–∑–∞—Ç—å –≤ –∫–≥).',
                chat_id=message.chat.id,
                message_id=data['info_message']
            )
            data['info_message'] = info_message.message_id
            await PersonChars.deadlift_results.set()


@dp.message_handler(state=PersonChars.deadlift_results)
async def add_deadlift_results(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() is False:
            try:
                await bot.delete_message(message.chat.id, data['info_message'])
            except Exception as exc:
                pass
            await message.delete()

            info_message = await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            data['info_message'] = info_message.message_id
        else:
            data['deadlift_results'] = int(message.text)

            await message.delete()
            info_message = await bot.edit_message_text(
                '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è—Ö —Å–æ —à—Ç–∞–Ω–≥–æ–π (–£—á–∏—Ç—ã–≤–∞—è –≤–µ—Å —à—Ç–∞–Ω–≥–∏ 20 –∫–≥, —É–∫–∞–∑–∞—Ç—å –≤ –∫–≥).',
                chat_id=message.chat.id,
                message_id=data['info_message']
            )
            data['info_message'] = info_message.message_id
            await PersonChars.squats_results.set()


@dp.message_handler(state=PersonChars.squats_results)
async def add_squats_results(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() is False:
            try:
                await bot.delete_message(message.chat.id, data['info_message'])
            except Exception as exc:
                pass
            await message.delete()

            info_message = await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            data['info_message'] = info_message.message_id
        else:
            data['squats_results'] = int(message.text)

            await message.delete()
            await bot.edit_message_text(
                '–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?',
                chat_id=message.chat.id,
                message_id=data['info_message'],
                reply_markup=kb.expected_results
            )
            await PersonChars.goals.set()


@dp.callback_query_handler(state=PersonChars.goals)
async def add_intensity(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['goals'] = callback.data

        info_message = await callback.message.edit_text(
            '–ù–∞—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.',
            reply_markup=kb.intensity
        )
        data['info_message'] = info_message.message_id
        await PersonChars.intensity.set()


@dp.callback_query_handler(state=PersonChars.intensity)
async def add_goal(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['intensity'] = callback.data

        info_message = await callback.message.edit_text(
            '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –±–æ–ª—å—à–µ? –ù–∞–ø–∏—à–∏—Ç–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'
        )
        data['info_message'] = info_message.message_id
        await PersonChars.focus.set()


@dp.message_handler(state=PersonChars.focus)
async def add_health_restrictions(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['goals'] += '. Additionally, ' + message.text
        await message.delete()
        await bot.edit_message_text(
            '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º? –ï—Å–ª–∏ –¥–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ '
            '(–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–∞–≤–º—ã, —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–æ–º, –≤—ã—Å–æ–∫–æ–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ).'
            '–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.',
            chat_id=message.chat.id,
            message_id=data['info_message']
        )

        await PersonChars.health_restrictions.set()


@dp.message_handler(state=PersonChars.health_restrictions)
async def add_allergy_products(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['health_restrictions'] = message.text

        await message.delete()
        await bot.edit_message_text(
            '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏—è –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏–∑–±–µ–≥–∞–µ—Ç–µ? (–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)',
            chat_id=message.chat.id,
            message_id=data['info_message']
        )

        await PersonChars.allergy.set()


@dp.message_handler(state=PersonChars.allergy)
async def add_intensity(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['allergy'] = message.text

        await message.delete()
        await bot.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è. ',
            chat_id=message.chat.id,
            message_id=data['info_message'],
            reply_markup=kb.times_per_week
        )

        await PersonChars.times_per_week.set()


@dp.callback_query_handler(state=PersonChars.times_per_week)
async def add_times_per_week(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['times_per_week'] = int(callback.data)
        if 'squats_results' not in data.keys():
            data['squats_results'] = 'none'
        if 'deadlift_results' not in data.keys():
            data['deadlift_results'] = 'none'
        if 'bench_results' not in data.keys():
            data['bench_results'] = 'none'

    await dal.User.add_attributes(state, callback.from_user.id)
    await state.set_state(BaseStates.start_workout)

    await callback.message.edit_text(
        '‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 2-—Ö –º–∏–Ω—É—Ç, –∏–∏-—Ç—Ä–µ–Ω–µ—Ä —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.'
    )

    attempts = 0
    program = None
    while attempts < 3:
        try:
            program, final_training = await process_prompt(
                user_id=callback.from_user.id
            )
            if '–ü–ú' in final_training or '%' in final_training:
                raise Exception
            break
        except Exception as exc:
            logger.error(f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
            attempts += 1

    await dal.Trainings.update_active_training_by_day(
        user_id=callback.from_user.id,
        day=1,
        active=True
    )
    training, new_day, active = await dal.Trainings.get_trainings_by_day(
        user_id=callback.from_user.id,
        day=1
    )
    if training is None:
        await callback.message.answer(f'–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                                      f'–ù–∞–ø–∏—à–∏—Ç–µ */start* —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.',
                                      parse_mode='Markdown')

    async with state.proxy() as data:
        data['day'] = 1
        data['weight_index'] = 0
        data['workout'] = training.split(' –∫–≥')

        answer_text = '‚úÖ <b>–í–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!</b>\n'
        answer_text += '<i>(–≤—ã –º–æ–∂–µ—Ç–µ –µ–µ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)</i>\n\n'
        answer_text += '–ù–∏–∂–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ 9 –Ω–µ–¥–µ–ª—å:\n\n'
        answer_text += f'{program}'

        await callback.message.answer(
            answer_text,
            reply_markup=kb.show_program,
            parse_mode='HTML'
        )


@dp.callback_query_handler(state=BaseStates.start_workout, text='continue')
async def after_program(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await callback.message.answer(
            'C–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É –ø–µ—Ä–≤—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!\n\n'
            'üí°–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é;\n\n\n'
            '‚Ä¢ <b>–í–≤–µ–¥–∏—Ç–µ</b> –ø–æ–¥—Ö–æ–¥—è—â–∏–π <b>–≤–µ—Å</b>, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–≤–≤–µ—Å—Ç–∏ –≤–µ—Å¬ª, '
            '(–ü–æ –ø–æ—Ä—è–¥–∫—É –±—É–¥—É—Ç –≤—ã–¥–µ–ª—è—Ç—å—Å—è –≤–µ—Å–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π [ ], –∏–∑–º–µ–Ω–∏—Ç–µ –≤–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–µ –ø–æ–¥–æ—à–µ–ª);\n\n\n'
            'üöÄ –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—ã –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!\n',
            parse_mode='HTML'
        )
        await asyncio.sleep(3)
        await callback.message.answer(
            '\nüèÅ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ *–≤–≤–µ—Å—Ç–∏ –≤–µ—Å*, –µ—Å–ª–∏ –≤–µ—Å –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ª–∏–±–æ *–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*.',
            reply_markup=kb.always_markup,
            parse_mode='Markdown'
        )
        await asyncio.sleep(2)

        await dal.Trainings.update_in_progress_training_by_day(
            user_id=callback.from_user.id,
            day=data['day'],
            in_progress=True
        )

        current_weight = data['workout'][0].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        await callback.message.answer(
            f'<b>–î–µ–Ω—å {data["day"]}</b>\n' + f'<b>(–ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê)</b>\n' + workout_in_process,
            reply_markup=kb.insert_weights_in_workout,
            parse_mode='HTML'
        )

# ----- –û–ë–´–ß–ù–´–ô ChatGPT ---------


# –í–ï–†–°–ò–Ø –ß–ê–¢–ê –° –î–û–û–ë–£–ß–ï–ù–ò–ï–ú

# @dp.message_handler(state='*')
# async def answer(message: types.Message, state: FSMContext):
#     global gpt_bot
#     try:
#         print(type(gpt_bot))
#     except Exception:
#         gpt_bot = UpgradedChatBot()
#
#     await message.reply('–°–µ–π—á–∞—Å..')
#     text = message.text
#     reply = gpt_bot.chatbot(text)
#
#     await message.reply(reply)


# @dp.message_handler(state=None)
# async def answer(message: types.Message):
#     try:
#         encoding = tiktoken.get_encoding('cl100k_base')
#         prompt_num_tokens = len(encoding.encode(message.text))
#         logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {message.from_user.id} - {message.text}')
#
#         logger.info(f'–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '
#                     f'- {prompt_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')
#         await message.reply(f'–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '
#                     f'- {prompt_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')
#
#         reply = await ChatGPT().chat(message.text)
#         reply_num_tokens = len(encoding.encode(reply))
#         await message.answer(f'–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ '
#                     f'- {reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤. '
#                     f'–í —Å—É–º–º–µ –≤—ã—à–ª–æ {prompt_num_tokens + reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')
#
#         logger.info(f'–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ '
#                     f'- {reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤. '
#                     f'–í —Å—É–º–º–µ –≤—ã—à–ª–æ {prompt_num_tokens + reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')
#
#         logger.info(f'–û—Ç–≤–µ—Ç - {reply}')
#         await message.reply(reply)
#     except Exception as exc:
#         logger.info(f'–û—à–∏–±–∫–∞ - {exc}')
#         await message.reply(f'–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
