import time
from time import sleep
import os

from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

from dotenv import load_dotenv
from loguru import logger

from .states import PersonChars, TimetableDays
from app import keyboards as kb
from gpt.chat import fill_prompt
import dal

load_dotenv()
bot = Bot(os.getenv('TOKEN'))

dp = Dispatcher(bot=bot, storage=MemoryStorage())  # storage –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ redis
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if state:
        await state.finish()

    user = await dal.User.select_attributes(message.from_user.id)
    if user:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.main)
    else:
        await message.answer(
            'üë®‚Äçüíº –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –æ—Ç Health AI, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏'
            ' –∫ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Ö–æ—Ä–æ—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–µ.')
        sleep(1)

        await message.answer(
            'üë®üß¨ –ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è'
            ' –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è,'
            ' –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ä–∏—Ç–º.')
        sleep(1)

        await message.answer(
            'üöÄ –ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ö–æ–¥—É –∫ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å'
            ' –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–¥–∞ –ª–µ–≥—á–µ, —á–µ–º –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º!')
        sleep(1)

        await message.answer(
            '–° –Ω–∞–º–∏ —É –≤–∞—Å –±—É–¥—É—Ç: \n'
            'üå± –ì–∏–±–∫–∏–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏ \n'
            'üå± –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò \n'
            'üå± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π \n'
            'üå± –î–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–µ—Ä—É-–ò–ò 24/7')
        sleep(1)

        await message.answer(
            'üë®‚Äú–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ '
            '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (–æ–∫–æ–ª–æ 3 –º–∏–Ω—É—Ç).‚Äù', reply_markup=kb.main_new)


@dp.callback_query_handler(state=None, text=['update_data', 'insert_data'])
async def create_edit(callback: types.CallbackQuery):
    await callback.message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é)',
        reply_markup=kb.sex
    )
    await PersonChars.sex.set()


@dp.callback_query_handler(state=None, text='lookup_data')
async def get_data(callback: types.CallbackQuery):
    logger.info(f'–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –¥–ª—è {callback.from_user.id}')
    data = await dal.User.select_attributes(callback.from_user.id)
    await callback.message.answer(
        f'–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç'
    )
    timetable, recipes, shopping_list, trainings = await fill_prompt(data)
    await dal.Timetable.update_timetable(callback.from_user.id, timetable)
    await dal.Recipes.update_recipes(callback.from_user.id, 'monday', recipes)
    await dal.ShoppingList.update_shopping_list(callback.from_user.id, shopping_list)
    await dal.Trainings.update_trainings(callback.from_user.id, 'monday', trainings)

    await TimetableDays.monday.set()
    timetable = await dal.Timetable.get_timetable(callback.from_user.id)
    await callback.message.answer(
        f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{timetable.monday}',
        reply_markup=kb.timetable
    )


@dp.callback_query_handler(state=None, text='SHOW_TIMETABLE')
async def show_timetable(callback: types.CallbackQuery):
    await TimetableDays.monday.set()
    timetable = await dal.Timetable.get_timetable(callback.from_user.id)
    await callback.message.answer(
        f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{timetable.monday}',
        reply_markup=kb.timetable
    )


@dp.callback_query_handler(state=[TimetableDays.monday,
                                  TimetableDays.tuesday,
                                  TimetableDays.wednesday,
                                  TimetableDays.thursday,
                                  TimetableDays.friday,
                                  TimetableDays.saturday,
                                  TimetableDays.sunday],
                           text='show_recipes')
async def show_recipes(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        f'–ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã...'
    )
    time.sleep(2)
    current_state = await state.get_state()
    day_of_week = current_state.split(':')[1]
    recipes = await dal.Recipes.get_recipes_by_day_of_week(callback.from_user.id, day_of_week)

    while recipes is None:
        await callback.message.answer(
            f'–ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã...'
        )
        time.sleep(2)

    await callback.message.answer(
        f'–í–æ—Ç –≤–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ {day_of_week}:\n{recipes}',
        reply_markup=kb.recipes
    )


@dp.callback_query_handler(state=[TimetableDays.monday,
                                  TimetableDays.tuesday,
                                  TimetableDays.wednesday,
                                  TimetableDays.thursday,
                                  TimetableDays.friday,
                                  TimetableDays.saturday,
                                  TimetableDays.sunday],
                           text='show_shopping_list')
async def show_shopping_list(callback: types.CallbackQuery):
    await callback.message.answer(
        f'–ü–æ–ª—É—á–∞–µ–º –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏...'
    )
    time.sleep(1)
    shopping_list = await dal.ShoppingList.get_shopping_list(callback.from_user.id)

    if shopping_list is None:
        await callback.message.answer(
            f'<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—É—Å—Ç</b>',
            reply_markup=kb.timetable
        )

    await callback.message.answer(
        f'–í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n{shopping_list}',
        reply_markup=kb.recipes
    )


@dp.callback_query_handler(state=[TimetableDays.monday,
                                  TimetableDays.tuesday,
                                  TimetableDays.wednesday,
                                  TimetableDays.thursday,
                                  TimetableDays.friday,
                                  TimetableDays.saturday,
                                  TimetableDays.sunday],
                           text='show_trainings')
async def show_trainings(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        f'–ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...'
    )
    time.sleep(2)
    current_state = await state.get_state()
    day_of_week = current_state.split(':')[1]
    trainings = await dal.Trainings.get_trainings_by_day_of_week(callback.from_user.id, day_of_week)

    while trainings is None:
        await callback.message.answer(
            f'–ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...'
        )
        time.sleep(2)

    await callback.message.answer(
        f'–í–æ—Ç –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ {day_of_week}:\n{trainings}',
        reply_markup=kb.recipes
    )


@dp.callback_query_handler(state=[TimetableDays.monday,
                                  TimetableDays.tuesday,
                                  TimetableDays.wednesday,
                                  TimetableDays.thursday,
                                  TimetableDays.friday,
                                  TimetableDays.saturday,
                                  TimetableDays.sunday],
                           text='back_to_timetable')
@dp.callback_query_handler(state=None, text='SHOW_TIMETABLE')
async def show_timetable(callback: types.CallbackQuery):
    await TimetableDays.monday.set()
    timetable = await dal.Timetable.get_timetable(callback.from_user.id)
    await callback.message.answer(
        f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{timetable.monday}',
        reply_markup=kb.timetable
    )

@dp.callback_query_handler(state=PersonChars.sex)
async def add_sex(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'sex_man':
        async with state.proxy() as data:
            data['sex'] = '–ú—É–∂—Å–∫–æ–π'
    if callback.data == 'sex_woman':
        async with state.proxy() as data:
            data['sex'] = '–ñ–µ–Ω—Å–∫–∏–π'

    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)')
    await PersonChars.age.set()


@dp.message_handler(state=PersonChars.age)
async def add_age(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['age'] = message.text

    await message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–º)'
    )
    await PersonChars.height.set()


@dp.message_handler(state=PersonChars.height)
async def add_height(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['height'] = message.text

    await message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≥)'
    )
    await PersonChars.weight.set()


@dp.message_handler(state=PersonChars.weight)
async def add_weight(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['weight'] = message.text

    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )
    await PersonChars.illnesses.set()


@dp.message_handler(state=PersonChars.illnesses)
async def add_illnesses(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['illnesses'] = message.text

    await message.answer(
        '–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ, '
        '–µ—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–∏–µ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú–Ω–µ—Ç‚Äù (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )
    await PersonChars.drugs.set()


@dp.message_handler(state=PersonChars.drugs)
async def add_drugs(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['drugs'] = message.text

    await message.answer(
        '–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
        reply_markup=kb.level_of_fitness
    )
    await PersonChars.level_of_fitness.set()


@dp.callback_query_handler(state=PersonChars.level_of_fitness)
async def add_level_of_fitness(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'beginner':
        async with state.proxy() as data:
            data['level_of_fitness'] = '–ù–∞—á–∏–Ω–∞—é—â–∏–π'
    if callback.data == 'average':
        async with state.proxy() as data:
            data['level_of_fitness'] = '–°—Ä–µ–¥–Ω–∏–π'
    if callback.data == 'experienced':
        async with state.proxy() as data:
            data['level_of_fitness'] = '–û–ø—ã—Ç–Ω—ã–π'

    await callback.message.answer(
        '–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?',
        reply_markup=kb.goal
    )
    await PersonChars.goal.set()


@dp.callback_query_handler(state=PersonChars.goal, text=['lose_weight', 'bulk', 'keep_form', 'improve_health'])
async def add_goal(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'lose_weight':
        async with state.proxy() as data:
            data['goal'] = '–ü–æ—Ö—É–¥–µ–Ω–∏–µ'
    if callback.data == 'bulk':
        async with state.proxy() as data:
            data['goal'] = '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã'
    if callback.data == 'keep_form':
        async with state.proxy() as data:
            data['goal'] = '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'
    if callback.data == 'improve_health':
        async with state.proxy() as data:
            data['goal'] = '–£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è'

    await callback.message.answer(
        '–ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ç–µ—Ä—è—Ç—å 5 –∫–≥,'
        ' –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å 3 –∫–≥ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )

    await PersonChars.result.set()


@dp.callback_query_handler(state=PersonChars.goal, text=['goal_free_type'])
async def add_goal(callback: types.CallbackQuery):
    await callback.message.answer(
        '–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å? (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )


@dp.message_handler(state=PersonChars.goal)
async def add_goal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['goal'] = message.text

    await message.answer(
        '–ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ç–µ—Ä—è—Ç—å 5 –∫–≥,'
        ' –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å 3 –∫–≥ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )

    await PersonChars.result.set()


@dp.message_handler(state=PersonChars.result)
async def add_result(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['result'] = message.text

    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∏–∑–±–µ–≥–∞–µ—Ç–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–∏–µ? (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )

    await PersonChars.allergy.set()


@dp.message_handler(state=PersonChars.allergy)
async def add_allergy(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['allergy'] = message.text

    await message.answer(
        '–°–ª–µ–¥—É–µ—Ç–µ –ª–∏ –≤—ã –∫–∞–∫–æ–π-–ª–∏–±–æ –¥–∏–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?'
        ' –ù–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è, –≤–µ–≥–∞–Ω—Å–∫–∞—è, –±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è –∏ —Ç.–¥. (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )

    await PersonChars.diet.set()


@dp.message_handler(state=PersonChars.diet)
async def add_diet(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['diet'] = message.text

    await message.answer(
        '–ö–∞–∫–æ–µ —É –≤–∞—Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å? (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )

    await PersonChars.number_of_meals.set()


@dp.message_handler(state=PersonChars.number_of_meals)
async def add_number_of_meals(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number_of_meals'] = message.text

    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º?'
    )

    await PersonChars.trainings_per_week.set()


@dp.message_handler(state=PersonChars.trainings_per_week)
async def add_trainings_per_week(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['trainings_per_week'] = message.text

    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?',
        reply_markup=kb.train_time_amount
    )

    await PersonChars.train_time_amount.set()


@dp.callback_query_handler(state=PersonChars.train_time_amount)
async def add_train_time_amount(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '30min':
        async with state.proxy() as data:
            data['train_time_amount'] = '30 –º–∏–Ω—É—Ç'
    elif callback.data == '1hour':
        async with state.proxy() as data:
            data['train_time_amount'] = '1 —á–∞—Å'
    elif callback.data == '1-2hours':
        async with state.proxy() as data:
            data['train_time_amount'] = '1-2 —á–∞—Å–∞'
    elif callback.data == 'moreThan2hours':
        async with state.proxy() as data:
            data['train_time_amount'] = '–ë–æ–ª–µ–µ 2 —á–∞—Å–æ–≤'
    else:
        async with state.proxy() as data:
            data['train_time_amount'] = '–ù–µ –∑–Ω–∞—é'

    await callback.message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–æ—Ä—Ç–∑–∞–ª—É –∏–ª–∏ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—É?',
        reply_markup=kb.gym_access
    )

    await PersonChars.gym_access.set()


@dp.callback_query_handler(state=PersonChars.gym_access)
async def add_gym_access(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'yes':
        async with state.proxy() as data:
            data['gym_access'] = '–î–∞'
            data['gym_equipment'] = '–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–æ—Ä—Ç–∑–∞–ª—É'

        await dal.User.add_attributes(state, callback.from_user.id)
        await state.finish()
        await callback.message.answer(
            '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç'
        )

        prompt_data = await dal.User.select_attributes(callback.from_user.id)
        response_dict = await fill_prompt(prompt_data)
        for key, value in response_dict:
            await callback.message.answer(f'{key}:\n{value}')

    if callback.data == 'no':
        async with state.proxy() as data:
            data['gym_access'] = '–ù–µ—Ç'

        await callback.message.answer(
            '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤ –¥–æ—Å—Ç—É–ø–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–≥–∞–Ω—Ç–µ–ª–∏, —ç—Å–ø–∞–Ω–¥–µ—Ä—ã, —Ñ–∏—Ç–±–æ–ª –∏ —Ç.–¥.)?'
            ' (–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å)'
        )
        await PersonChars.gym_access_NO.set()


@dp.message_handler(state=PersonChars.gym_access_NO)
async def add_gym_equipment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gym_equipment'] = message.text
    await dal.User.add_attributes(state, message.from_user.id)

    await state.finish()
    await message.answer(
        '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç'
    )

    prompt_data = await dal.User.select_attributes(message.from_user.id)
    response = await fill_prompt(prompt_data)

    await message.answer(response)

#
# @dp.message_handler(state='*')
# async def answer(message: types.Message, state: FSMContext):
#     if state is not GPT.gpt:
#         await state.set_state(GPT.gpt)
#
#     data = await state.get_data()
#     print(data)
#     if data == {}:
#         await state.update_data(gpt=ChatGPT())
#         data = await state.get_data()
#
#     text = message.text
#     reply = data['gpt'].chat(text)
#     await state.update_data(gpt=data['gpt'])
#
#     await message.reply(reply)
