import time
from time import sleep
import os

from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types.message import ContentType

from dotenv import load_dotenv
from loguru import logger

from utils import process_prompt
from .states import PersonChars, timetable_states_list, timetable_states_str_list, TimetableDays, days_translation
from app import keyboards as kb
import dal
from gpt.chat_upgraded import UpgradedChatBot
from gpt.chat import ChatGPT

load_dotenv()
bot = Bot(os.getenv('TOKEN'))

dp = Dispatcher(bot=bot, storage=MemoryStorage())  # storage –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ redis
dp.middleware.setup(LoggingMiddleware())

PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü', amount=500*100)


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if state:
        await state.finish()
    logger.info('start')
    user = await dal.User.select_attributes(message.from_user.id)
    logger.info(f'user - {user}')

    if user:
        await state.set_state(TimetableDays.monday)
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=kb.always_markup)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
                             ' (–í–ù–ò–ú–ê–ù–ò–ï: –≤ —ç—Ç–æ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø–µ –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ—Å—Ç—å –ª–∏—à—å 1 –ø–æ–ø—ã—Ç–∫–∞)',
                             reply_markup=kb.main)
    else:
        await message.answer(
            'üë®‚Äçüíº –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –æ—Ç Health AI, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏'
            ' –∫ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Ö–æ—Ä–æ—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–µ.')
        sleep(1)

        await message.answer(
            'üë®üß¨ –ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è'
            ' –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è,'
            ' –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ä–∏—Ç–º.')
        sleep(1)

        await message.answer(
            'üöÄ –ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ö–æ–¥—É –∫ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å'
            ' –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–¥–∞ –ª–µ–≥—á–µ, —á–µ–º –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º!')
        sleep(1)

        await message.answer(
            '–° –Ω–∞–º–∏ —É –≤–∞—Å –±—É–¥—É—Ç: \n'
            'üå± –ì–∏–±–∫–∏–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏ \n'
            'üå± –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò \n'
            'üå± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–∏–π \n'
            'üå± –î–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–µ—Ä—É-–ò–ò 24/7')
        sleep(1)

        await message.answer(
            'üë®‚Äú–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ '
            '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (–æ–∫–æ–ª–æ 3 –º–∏–Ω—É—Ç).‚Äù', reply_markup=kb.main_new)


@dp.message_handler(state='*', text='–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def buy_subscription(message: types.Message, state: FSMContext):
    if os.getenv('PAYMENTS_TOKEN').split(':')[1] == 'TEST':
        await message.answer('–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!')

    await bot.send_invoice(message.chat.id,
                           title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞',
                           description='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü',
                           provider_token=os.getenv('PAYMENTS_TOKEN'),
                           currency='rub',
                           photo_url='https://img.freepik.com/premium-photo/this-sleek-minimalist-home-gym-features-floortoceiling-windows-that-allow-abundant-natural-light-illuminate-space-generated-by-ai_661108-5016.jpg',
                           photo_width=1270,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter='one-month-subscription',
                           payload='test-invoice-payload')


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    logger.info(f'–û–ø–ª–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        logger.info(f'{k} - {v}')

    await message.answer(f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} '
                         f'{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')


@dp.callback_query_handler(state='*', text='back_to_menu')
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    if state:
        await state.finish()

    await state.set_state(TimetableDays.monday)
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        ' (–í–ù–ò–ú–ê–ù–ò–ï: –≤ —ç—Ç–æ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø–µ –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ—Å—Ç—å –ª–∏—à—å 1 –ø–æ–ø—ã—Ç–∫–∞)',
        reply_markup=kb.main
    )


@dp.callback_query_handler(state='*', text=['update_data', 'insert_data'])
async def create_edit(callback: types.CallbackQuery):

    user = await dal.User.select_attributes(callback.from_user.id)
    if user:
        if user.attempts >= 2:
            logger.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
            await callback.message.answer(
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 2 –ø–æ–ø—ã—Ç–∫–∞–º–∏,'
                ' –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ'
            )
            return None

        await dal.User.increase_attempts_by_user_id(callback.from_user.id)

    await callback.message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é)',
        reply_markup=kb.gender
    )
    await PersonChars.gender.set()


@dp.callback_query_handler(state='*', text='lookup_data')
async def get_data(callback: types.CallbackQuery):
    user = await dal.User.select_attributes(callback.from_user.id)
    if user.attempts >= 2:
        logger.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
        await callback.message.answer(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 2 –ø–æ–ø—ã—Ç–∫–∞–º–∏,'
            ' –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ'
        )
        return None

    await dal.User.increase_attempts_by_user_id(callback.from_user.id)

    logger.info(f'–°–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {callback.from_user.id}')
    await callback.message.answer(
        '–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ \n'
        '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 4 –º–∏–Ω—É—Ç'
    )
    for attempt_number in range(3):
        try:
            timetable = await process_prompt(
                user_id=callback.from_user.id
            )
            await callback.message.answer(
                f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{timetable.monday}',
                reply_markup=kb.timetable
            )
            break
        except Exception as exc:
            logger.error(f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}. –ü–æ–ø—ã—Ç–∫–∞ {attempt_number + 1}')
            if attempt_number == 2:
                raise Exception
                # await callback.message.answer(
                #     '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
                # )


@dp.callback_query_handler(state=timetable_states_list, text=['SHOW_TIMETABLE', 'back_to_timetable'])
async def show_timetable(callback: types.CallbackQuery, state: FSMContext):
    timetable = await dal.Timetable.get_timetable(callback.from_user.id)
    state_name = await state.get_state()
    day_of_week = state_name.split(":")[1]

    await callback.message.answer(
        f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {days_translation[day_of_week]}:\n{eval(f"timetable.{day_of_week}")}',
        reply_markup=kb.timetable
    )


@dp.callback_query_handler(state=timetable_states_list, text=['show_next_day', 'show_prev_day'])
async def show_timetable(callback: types.CallbackQuery, state: FSMContext):
    state_name = await state.get_state()
    if callback.data == 'show_next_day':
        state_index = timetable_states_str_list.index(state_name)
        if state_index == len(timetable_states_str_list) - 1:
            await state.set_state(TimetableDays.monday)
            day_of_week = 'monday'
        else:
            day_of_week = timetable_states_str_list[state_index + 1].split(':')[1]
            await state.set_state(eval(f'TimetableDays.{day_of_week}'))

    elif callback.data == 'show_prev_day':
        state_index = timetable_states_str_list.index(state_name)
        if state_index == 0:
            await state.set_state(TimetableDays.sunday)
            day_of_week = 'sunday'
        else:
            day_of_week = timetable_states_str_list[state_index - 1].split(':')[1]
            await state.set_state(eval(f'TimetableDays.{day_of_week}'))
    else:
        logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è data –≤ callback_query - {callback.data}')
        raise Exception

    timetable = await dal.Timetable.get_timetable(callback.from_user.id)
    await callback.message.answer(
        f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {days_translation[day_of_week]}:\n{eval(f"timetable.{day_of_week}")}',
        reply_markup=kb.timetable
    )


@dp.callback_query_handler(state=PersonChars.gender)
async def add_sex(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'gender_man':
        async with state.proxy() as data:
            data['gender'] = '–ú—É–∂—Å–∫–æ–π'
    if callback.data == 'gender_woman':
        async with state.proxy() as data:
            data['gender'] = '–ñ–µ–Ω—Å–∫–∏–π'

    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)')
    await PersonChars.age.set()


@dp.message_handler(state=PersonChars.age)
async def add_age(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['age'] = int(message.text)

    await message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–º)'
    )
    await PersonChars.height.set()


@dp.message_handler(state=PersonChars.height)
async def add_height(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['height'] = int(message.text)

    await message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≥)'
    )
    await PersonChars.weight.set()


@dp.message_handler(state=PersonChars.weight)
async def add_weight(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['weight'] = int(message.text)

    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –∑–∞–ª–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)'
    )
    await PersonChars.gym_experience.set()


@dp.message_handler(state=PersonChars.gym_experience)
async def add_illnesses(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gym_experience'] = message.text

    await message.answer(
        '–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π?'
    )
    await PersonChars.goal.set()


@dp.message_handler(state=PersonChars.goal)
async def add_drugs(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['goal'] = message.text

    await message.answer(
        '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏ (–Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)?'
    )
    await PersonChars.time_to_reach.set()


@dp.message_handler(state=PersonChars.time_to_reach)
async def add_level_of_fitness(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['time_to_reach'] = int(message.text)

    await message.answer(
        '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Å–æ–∫—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?', reply_markup=kb.intensity
    )
    await PersonChars.intensity.set()


@dp.callback_query_handler(state=PersonChars.intensity)
async def add_goal(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'low':
        async with state.proxy() as data:
            data['intensity'] = 'low'
    if callback.data == 'moderate':
        async with state.proxy() as data:
            data['intensity'] = 'moderate'
    if callback.data == 'high':
        async with state.proxy() as data:
            data['intensity'] = 'high'

    await callback.message.answer(
        f'–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º (–Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)?'
    )

    await PersonChars.times_per_week.set()


@dp.message_handler(state=PersonChars.times_per_week)
async def add_goal(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    elif int(message.text) > 7:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 7')
    else:
        async with state.proxy() as data:
            data['times_per_week'] = int(message.text)

    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)?'
    )
    await PersonChars.health_restrictions.set()


@dp.message_handler(state=PersonChars.health_restrictions)
async def add_goal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['health_restrictions'] = message.text

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –Ω—ã–Ω–µ—à–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–∏—Å—è–¥–µ. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç'
    )

    await PersonChars.squats_results.set()


@dp.message_handler(state=PersonChars.squats_results)
async def add_result(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['squats_results'] = message.text

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –Ω—ã–Ω–µ—à–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∂–∏–º–µ –ª–µ–∂–∞. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç'
    )

    await PersonChars.bench_results.set()


@dp.message_handler(state=PersonChars.bench_results)
async def add_allergy(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['bench_results'] = message.text

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –Ω—ã–Ω–µ—à–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç'
    )

    await PersonChars.deadlift_results.set()


@dp.message_handler(state=PersonChars.deadlift_results)
async def add_diet(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deadlift_results'] = message.text

        await dal.User.add_attributes(state, message.from_user.id)
        await state.finish()

        await message.answer(
            '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É, –Ω–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ \n'
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 4 –º–∏–Ω—É—Ç'
        )

        for attempt_number in range(3):
            try:
                timetable = await process_prompt(
                    user_id=message.from_user.id
                )
                await message.answer(
                    f'–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n{timetable.monday}',
                    reply_markup=kb.timetable
                )
                break
            except Exception as exc:
                logger.error(f'–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}. –ü–æ–ø—ã—Ç–∫–∞ {attempt_number + 1}')
                if attempt_number == 2:
                    await message.answer(
                        '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
                    )


### –í–ï–†–°–ò–Ø –ß–ê–¢–ê –° –î–û–û–ë–£–ß–ï–ù–ò–ï–ú

# @dp.message_handler(state='*')
# async def answer(message: types.Message, state: FSMContext):
#     global gpt_bot
#     try:
#         print(type(gpt_bot))
#     except Exception:
#         gpt_bot = UpgradedChatBot()
#
#     await message.reply('–°–µ–π—á–∞—Å..')
#     text = message.text
#     reply = gpt_bot.chatbot(text)
#
#     await message.reply(reply)


@dp.message_handler(state='*')
async def answer(message: types.Message):
    try:
        await message.reply('–°–µ–π—á–∞—Å..')
        logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}')
        reply = ChatGPT().chat(message.text)
        logger.info(f'–û—Ç–≤–µ—Ç - {reply}')
        await message.reply(reply)
    except Exception as exc:
        logger.info(f'–û—à–∏–±–∫–∞ - {exc}')
        await message.reply(f'–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
