import time
from time import sleep
import os

import tiktoken
from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types.message import ContentType

from dotenv import load_dotenv
from loguru import logger

from utils import process_prompt, split_workout
from .states import PersonChars, BaseStates
from app import keyboards as kb
import dal
from gpt.chat import ChatGPT

# ----- –°–¢–ê–†–¢ –ò –ü–û–î–ü–ò–°–ö–ê ---------

load_dotenv()
bot = Bot(os.getenv('TOKEN'))

dp = Dispatcher(bot=bot, storage=MemoryStorage())  # storage –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ redis
dp.middleware.setup(LoggingMiddleware())

PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü', amount=500*100)


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message, state: FSMContext):
    if state:
        await state.finish()
    logger.info('start')
    user = await dal.User.select_attributes(message.from_user.id)
    logger.info(f'user - {user}')

    if user:
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=kb.always_markup)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                             reply_markup=kb.main)
    else:
        await message.answer(
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä Health AI. –ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ '
            '–ø–æ–¥ –≤–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.',
            parse_mode='Markdown'
        )
        sleep(1)
        await message.answer(
            '–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω—è—Ç–∏–π –∏ –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.',
            parse_mode='Markdown'
        )
        sleep(1)
        await message.answer(
            '_–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Health AI, –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –∏ —Å–æ–≤–µ—Ç–∞—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤, '
            '–Ω–æ –Ω–µ—Å—É—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä._',
            parse_mode='Markdown'
        )
        sleep(1)
        await message.answer(
            '_–ú—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç—Ä–∞–≤–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π._',
            reply_markup=kb.main_new,
            parse_mode='Markdown'
        )


@dp.callback_query_handler(state='*', text='generate_trainings')
async def generate_trainings(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '‚è≥–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
    )

    await state.set_state(BaseStates.show_trainings)

    await process_prompt(
        user_id=callback.from_user.id
    )
    training, new_day = await dal.Trainings.get_trainings_by_day(
        user_id=callback.from_user.id,
        day=1
    )
    async with state.proxy() as data:
        data['day'] = 1
        data['workout'] = training

    await callback.message.answer(
        '‚úÖ –ü–ª–∞–Ω –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–æ—Ç–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é!'
    )
    sleep(2)
    await callback.message.answer(
        training,
        reply_markup=kb.trainings_tab
    )


@dp.message_handler(state='*', text='–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def buy_subscription(message: types.Message, state: FSMContext):
    if os.getenv('PAYMENTS_TOKEN').split(':')[1] == 'TEST':
        await message.answer('–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!')

    await bot.send_invoice(message.chat.id,
                           title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞',
                           description='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü',
                           provider_token=os.getenv('PAYMENTS_TOKEN'),
                           currency='rub',
                           photo_url='https://img.freepik.com/premium-photo/this-sleek-minimalist-home-gym-features-floortoceiling-windows-that-allow-abundant-natural-light-illuminate-space-generated-by-ai_661108-5016.jpg',
                           photo_width=1270,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter='one-month-subscription',
                           payload='test-invoice-payload')


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    logger.info(f'–û–ø–ª–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        logger.info(f'{k} - {v}')

    await message.answer(f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} '
                         f'{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')


@dp.callback_query_handler(state='*', text='back_to_menu')
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    if state:
        await state.finish()

    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=kb.main
    )


# ----- –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ---------


@dp.callback_query_handler(state='*', text=['SHOW_TIMETABLE', 'back_to_timetable'])
async def show_timetable(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BaseStates.show_trainings)

    training, day = await dal.Trainings.get_trainings_by_day(
        user_id=callback.from_user.id,
        day=1
    )
    async with state.proxy() as data:
        data['day'] = 1
        data['workout'] = training

    await callback.message.answer(
        training,
        reply_markup=kb.trainings_tab
    )


@dp.callback_query_handler(state='*', text=['next_workout', 'prev_workout'])
async def switch_days(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback.data == 'next_workout':
            training, new_day = await dal.Trainings.get_next_training(
                user_id=callback.from_user.id,
                current_day=data['day']
            )
            if training:
                data['day'] = new_day
                data['workout'] = training
                await callback.message.answer(
                    training,
                    reply_markup=kb.trainings_tab
                )
            else:
                training, new_day = await dal.Trainings.get_trainings_by_day(
                    user_id=callback.from_user.id,
                    day=1
                )
                data['day'] = 1
                data['workout'] = training

                await callback.message.answer(
                    training,
                    reply_markup=kb.trainings_tab
                )

        elif callback.data == 'prev_workout':
            training, new_day = await dal.Trainings.get_prev_training(
                user_id=callback.from_user.id,
                current_day=data['day']
            )
            if training:
                data['day'] = new_day
                data['workout'] = training

                await callback.message.answer(
                    training,
                    reply_markup=kb.trainings_tab
                )
            else:
                training, new_day = await dal.Trainings.get_prev_training(
                    user_id=callback.from_user.id,
                    current_day=1000000
                )
                data['day'] = new_day
                data['workout'] = training

                await callback.message.answer(
                    training,
                    reply_markup=kb.trainings_tab
                )
        else:
            logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è data –≤ callback_query - {callback.data}')
            raise Exception


@dp.callback_query_handler(state=BaseStates.show_trainings, text='rebuild_workouts')
async def ask_client_for_changes(callback: types.CallbackQuery, state: FSMContext):
    user = await dal.User.select_attributes(callback.from_user.id)
    if user.rebuilt == 1:
        await callback.message.answer(
            '–í—ã —É–∂–µ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –Ω–µ–¥–µ–ª—é'
        )
    else:
        await callback.message.answer(
            '–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. '
            '(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å 1 —Ä–∞–∑ –≤ –ø—Ä–æ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ —É–±—Ä–∞—Ç—å)'
        )
        await state.set_state(BaseStates.rebuild_workouts)


@dp.message_handler(state=BaseStates.rebuild_workouts)
async def rebuild_workouts(message: types.Message, state: FSMContext):
    await message.answer(
        '‚è≥–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
    )

    await state.set_state(BaseStates.show_trainings)

    await dal.User.update_rebuilt_parameter(message.from_user.id)

    await process_prompt(
        user_id=message.from_user.id,
        client_changes=message.text
    )
    training, new_day = await dal.Trainings.get_trainings_by_day(
        user_id=message.from_user.id,
        day=1
    )
    async with state.proxy() as data:
        data['day'] = 1
        data['workout'] = training

    await message.answer(
        training,
        reply_markup=kb.trainings_tab
    )


@dp.callback_query_handler(state=BaseStates.show_trainings, text='start_workout')
async def prestart_workout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '‚òùÔ∏è –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –≤–µ—Å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º. '
        '–ï—Å–ª–∏ –≤–∞–º —Ç—è–∂–µ–ª–æ –∏–ª–∏ –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –∫–∞–∫–∏–º-—Ç–æ –≤–µ—Å–æ–º, '
        '–ø–æ–º–µ–Ω—è–π—Ç–µ –µ–≥–æ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.'
    )
    sleep(1)
    await callback.message.answer(
        '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!'
    )
    sleep(1)
    await state.set_state(BaseStates.start_workout)
    async with state.proxy() as data:
        data['weight_index'] = 0
        data['workout'] = data['workout'].split(' –∫–≥')
    await callback.message.answer(
        '‚òù–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–π–¥–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–∏–ª–∏ –ø–æ —Ö–æ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π), '
        '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è. '
        '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n–•–æ—Ä–æ—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
        reply_markup=kb.start_workout
    )


@dp.callback_query_handler(state=BaseStates.start_workout, text='insert_weights')
async def begin_workout(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        current_weight = data['workout'][0].split(' ')[-1]
        workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
        await callback.message.answer(
            workout_in_process,
            reply_markup=kb.insert_weights_in_workout,
            parse_mode='Markdown'
        )


@dp.callback_query_handler(state=BaseStates.start_workout, text='add_weight')
async def add_weight(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BaseStates.add_weight)
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å'
    )


@dp.message_handler(state=BaseStates.add_weight)
async def add_weight(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    elif int(message.text) > 300:
        await message.answer('–ü–æ—Ö–æ–∂–µ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å, –ø–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            workout_in_process = await split_workout(data['workout'], data['weight_index'], int(message.text))
            workout_in_process = workout_in_process.replace('*', '')
            data['workout'] = workout_in_process.split(' –∫–≥')

            if data['weight_index'] == len(data['workout']) - 2:
                await state.set_state(BaseStates.show_trainings)

                for i in range(len(data['workout'])-1):
                    cur_segment = data['workout'][i].split('\n')[-1].split(' ')
                    name = ' '.join(cur_segment[:-2])
                    weight = cur_segment[-1]

                    next_segment = data['workout'][i+1].split('\n')[0].split(' ')
                    sets = next_segment[1]
                    reps = next_segment[3]
                    await dal.Exercises.add_exercise(name)
                    await dal.UserResults.update_user_results(
                        user_id=message.from_user.id,
                        name=name,
                        sets=sets,
                        weight=weight,
                        reps=reps
                    )

                await message.answer('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
                sleep(0.5)
                await dal.Trainings.update_trainings(message.from_user.id, data['day'], workout_in_process, False)
                training, new_day = await dal.Trainings.get_trainings_by_day(
                    user_id=message.from_user.id,
                    day=1
                )
                data['workout'] = training

                await message.answer(
                    training,
                    reply_markup=kb.trainings_tab
                )
            else:
                await state.set_state(BaseStates.start_workout)
                data['weight_index'] += 1
                current_weight = data['workout'][data['weight_index']].split(' ')[-1]
                workout_in_process = await split_workout(data['workout'], data['weight_index'], current_weight)
                await message.answer(
                    workout_in_process,
                    reply_markup=kb.insert_weights_in_workout,
                    parse_mode='Markdown'
                )

# ----- –ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---------


@dp.callback_query_handler(state='*', text=['update_data', 'insert_data'])
async def create_edit(callback: types.CallbackQuery):
    await callback.message.answer(
        'üèÉ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥! –¢—É–¥–∞ –≤–∫–ª—é—á—ë–Ω –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 1 —Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –µ–≥–æ.' 
        '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ '
        '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.'
    )
    sleep(1)
    await callback.message.answer(
        """
       üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–ª–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.
        """
    )
    sleep(1)
    await callback.message.answer(
        '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª',
        reply_markup=kb.gender
    )
    await PersonChars.gender.set()


@dp.callback_query_handler(state=PersonChars.gender)
async def add_sex(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'gender_man':
        async with state.proxy() as data:
            data['gender'] = '–ú—É–∂—Å–∫–æ–π'
    if callback.data == 'gender_woman':
        async with state.proxy() as data:
            data['gender'] = '–ñ–µ–Ω—Å–∫–∏–π'

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ü–æ–ª–Ω—ã—Ö –ª–µ—Ç)')
    await PersonChars.age.set()


@dp.message_handler(state=PersonChars.age)
async def add_age(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['age'] = int(message.text)

        await message.answer(
            '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç (—Å–º)'
        )
        await PersonChars.height.set()


@dp.message_handler(state=PersonChars.height)
async def add_height(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['height'] = int(message.text)

        await message.answer(
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–∫–≥)'
        )
        await PersonChars.weight.set()


@dp.message_handler(state=PersonChars.weight)
async def add_weight(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['weight'] = int(message.text)

        await message.answer(
            '–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
            reply_markup=kb.gym_experience
        )
        await PersonChars.gym_experience.set()


@dp.callback_query_handler(state=PersonChars.gym_experience)
async def add_gym_experience(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['gym_experience'] = callback.data
    if callback.data in ['medium', 'experienced']:
        await callback.message.answer(
            '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–∏ –º–∞–∫–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–µ—Å–∞ –≤ –∂–∏–º–µ –ª–µ–∂–∞, —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ –∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è—Ö —Å–æ —à—Ç–∞–Ω–≥–æ–π?',
            reply_markup=kb.max_results
        )
        await PersonChars.max_results.set()
    else:
        await callback.message.answer(
            '–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?',
            reply_markup=kb.expected_results
        )
        await PersonChars.goals.set()


@dp.callback_query_handler(state=PersonChars.max_results)
async def ask_max_results(callback: types.CallbackQuery):
    if callback.data == 'yes':
        await callback.message.answer(
            '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∂–∏–º–µ –ª–µ–∂–∞ (–£—á–∏—Ç—ã–≤–∞—è –≤–µ—Å —à—Ç–∞–Ω–≥–∏ 20 –∫–≥, —É–∫–∞–∑–∞—Ç—å –≤ –∫–≥):'
        )
        await PersonChars.bench_results.set()

    if callback.data == 'no':
        await callback.message.answer(
            '–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?',
            reply_markup=kb.expected_results
        )
        await PersonChars.goals.set()


@dp.message_handler(state=PersonChars.bench_results)
async def add_bench_results(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['bench_results'] = int(message.text)

        await message.answer(
            '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ (–£—á–∏—Ç—ã–≤–∞—è –≤–µ—Å —à—Ç–∞–Ω–≥–∏ 20 –∫–≥, —É–∫–∞–∑–∞—Ç—å –≤ –∫–≥).'
        )
        await PersonChars.deadlift_results.set()


@dp.message_handler(state=PersonChars.deadlift_results)
async def add_deadlift_results(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['deadlift_results'] = int(message.text)

        await message.answer(
            '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è—Ö —Å–æ —à—Ç–∞–Ω–≥–æ–π (–£—á–∏—Ç—ã–≤–∞—è –≤–µ—Å —à—Ç–∞–Ω–≥–∏ 20 –∫–≥, —É–∫–∞–∑–∞—Ç—å –≤ –∫–≥).'
        )
        await PersonChars.squats_results.set()


@dp.message_handler(state=PersonChars.squats_results)
async def add_squats_results(message: types.Message, state: FSMContext):
    if message.text.isdigit() is False:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        async with state.proxy() as data:
            data['squats_results'] = int(message.text)

        await message.answer(
            '–ö–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫? (–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∏–Ω—É—Ç—å –≤–µ—Å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É)',
            reply_markup=kb.expected_results
        )
        await PersonChars.goals.set()


@dp.callback_query_handler(state=PersonChars.goals)
async def add_goal(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['goals'] = callback.data

    await callback.message.answer(
        '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –±–æ–ª—å—à–µ? –ù–∞–ø–∏—à–∏—Ç–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'
    )
    await PersonChars.focus.set()


@dp.message_handler(state=PersonChars.focus)
async def add_squats_results(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['goals'] += '. Additionally, ' + message.text

    await message.answer(
        '–ù–∞—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.',
        reply_markup=kb.intensity
    )
    await PersonChars.intensity.set()


@dp.callback_query_handler(state=PersonChars.intensity)
async def add_intensity(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['intensity'] = callback.data

    await callback.message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º? –ï—Å–ª–∏ –¥–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ '
        '(–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–∞–≤–º—ã, —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–æ–º, –≤—ã—Å–æ–∫–æ–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ).'
        '–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.'
    )
    await PersonChars.health_restrictions.set()


@dp.message_handler(state=PersonChars.health_restrictions)
async def add_intensity(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['health_restrictions'] = message.text

    await message.answer(
        '–£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è. '
        '(–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 3-4 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é, –≤–≤–µ—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç 2 –¥–æ 4 –¥–Ω–µ–π)',
        reply_markup=kb.times_per_week
    )

    await PersonChars.times_per_week.set()


@dp.callback_query_handler(state=PersonChars.times_per_week)
async def add_times_per_week(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['times_per_week'] = int(callback.data)
        if 'squats_results' not in data.keys():
            data['squats_results'] = 'none'
        if 'deadlift_results' not in data.keys():
            data['deadlift_results'] = 'none'
        if 'bench_results' not in data.keys():
            data['bench_results'] = 'none'

    await dal.User.add_attributes(state, callback.from_user.id)
    await state.set_state(BaseStates.show_trainings)

    await callback.message.answer(
        '‚è≥–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
    )

    await process_prompt(
        user_id=callback.from_user.id
    )
    training, new_day = await dal.Trainings.get_trainings_by_day(
        user_id=callback.from_user.id,
        day=1
    )
    async with state.proxy() as data:
        data['day'] = 1
        data['workout'] = training

    await callback.message.answer(
        '‚úÖ –ü–ª–∞–Ω –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–æ—Ç–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é!'
    )
    sleep(2)
    await callback.message.answer(
        training,
        reply_markup=kb.trainings_tab
    )


# ----- –û–ë–´–ß–ù–´–ô ChatGPT ---------


# –í–ï–†–°–ò–Ø –ß–ê–¢–ê –° –î–û–û–ë–£–ß–ï–ù–ò–ï–ú

# @dp.message_handler(state='*')
# async def answer(message: types.Message, state: FSMContext):
#     global gpt_bot
#     try:
#         print(type(gpt_bot))
#     except Exception:
#         gpt_bot = UpgradedChatBot()
#
#     await message.reply('–°–µ–π—á–∞—Å..')
#     text = message.text
#     reply = gpt_bot.chatbot(text)
#
#     await message.reply(reply)


@dp.message_handler(state=None)
async def answer(message: types.Message):
    try:
        encoding = tiktoken.get_encoding('cl100k_base')
        prompt_num_tokens = len(encoding.encode(message.text))
        logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {message.from_user.id} - {message.text}')

        logger.info(f'–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '
                    f'- {prompt_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')
        await message.reply(f'–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '
                    f'- {prompt_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')

        reply = ChatGPT().chat(message.text)
        reply_num_tokens = len(encoding.encode(reply))
        await message.answer(f'–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ '
                    f'- {reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤. '
                    f'–í —Å—É–º–º–µ –≤—ã—à–ª–æ {prompt_num_tokens + reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')

        logger.info(f'–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ '
                    f'- {reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤. '
                    f'–í —Å—É–º–º–µ –≤—ã—à–ª–æ {prompt_num_tokens + reply_num_tokens} —Ç–æ–∫–µ–Ω–æ–≤')

        logger.info(f'–û—Ç–≤–µ—Ç - {reply}')
        await message.reply(reply)
    except Exception as exc:
        logger.info(f'–û—à–∏–±–∫–∞ - {exc}')
        await message.reply(f'–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {exc}')
